// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/ProductService.proto

#include "services/ProductService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace gRPCTest {
namespace Protos {
namespace Services {
PROTOBUF_CONSTEXPR ProductByIdRequest::ProductByIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.product_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProductByIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductByIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductByIdRequestDefaultTypeInternal() {}
  union {
    ProductByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductByIdRequestDefaultTypeInternal _ProductByIdRequest_default_instance_;
PROTOBUF_CONSTEXPR ProductPriceRequest::ProductPriceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.product_price_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProductPriceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProductPriceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProductPriceRequestDefaultTypeInternal() {}
  union {
    ProductPriceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProductPriceRequestDefaultTypeInternal _ProductPriceRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateProductResponse::CreateProductResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.product_)*/nullptr
  , /*decltype(_impl_.error_status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateProductResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateProductResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateProductResponseDefaultTypeInternal() {}
  union {
    CreateProductResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateProductResponseDefaultTypeInternal _CreateProductResponse_default_instance_;
PROTOBUF_CONSTEXPR FetchProductResponse::FetchProductResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.product_)*/nullptr
  , /*decltype(_impl_.error_status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchProductResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchProductResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchProductResponseDefaultTypeInternal() {}
  union {
    FetchProductResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchProductResponseDefaultTypeInternal _FetchProductResponse_default_instance_;
PROTOBUF_CONSTEXPR FetchProductsResponse::FetchProductsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.products_)*/{}
  , /*decltype(_impl_.error_status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchProductsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchProductsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchProductsResponseDefaultTypeInternal() {}
  union {
    FetchProductsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchProductsResponseDefaultTypeInternal _FetchProductsResponse_default_instance_;
}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest
static ::_pb::Metadata file_level_metadata_services_2fProductService_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_services_2fProductService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2fProductService_2eproto = nullptr;

const uint32_t TableStruct_services_2fProductService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::ProductByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::ProductByIdRequest, _impl_.product_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::ProductPriceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::ProductPriceRequest, _impl_.product_price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::CreateProductResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::CreateProductResponse, _impl_.product_),
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::CreateProductResponse, _impl_.error_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchProductResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchProductResponse, _impl_.product_),
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchProductResponse, _impl_.error_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchProductsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchProductsResponse, _impl_.products_),
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchProductsResponse, _impl_.error_status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::gRPCTest::Protos::Services::ProductByIdRequest)},
  { 7, -1, -1, sizeof(::gRPCTest::Protos::Services::ProductPriceRequest)},
  { 14, -1, -1, sizeof(::gRPCTest::Protos::Services::CreateProductResponse)},
  { 22, -1, -1, sizeof(::gRPCTest::Protos::Services::FetchProductResponse)},
  { 30, -1, -1, sizeof(::gRPCTest::Protos::Services::FetchProductsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::gRPCTest::Protos::Services::_ProductByIdRequest_default_instance_._instance,
  &::gRPCTest::Protos::Services::_ProductPriceRequest_default_instance_._instance,
  &::gRPCTest::Protos::Services::_CreateProductResponse_default_instance_._instance,
  &::gRPCTest::Protos::Services::_FetchProductResponse_default_instance_._instance,
  &::gRPCTest::Protos::Services::_FetchProductsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_services_2fProductService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035services/ProductService.proto\022\030gRPCTes"
  "t.Protos.Services\032\033google/protobuf/empty"
  ".proto\032\024models/Product.proto\032\032common/Ser"
  "viceStatus.proto\"(\n\022ProductByIdRequest\022\022"
  "\n\nproduct_id\030\001 \001(\003\",\n\023ProductPriceReques"
  "t\022\025\n\rproduct_price\030\001 \001(\001\"\210\001\n\025CreateProdu"
  "ctResponse\0220\n\007product\030\001 \001(\0132\037.gRPCTest.P"
  "rotos.Models.Product\022=\n\014error_status\030\002 \001"
  "(\0132\'.gRPCTest.Protos.Services.ServiceSta"
  "tus\"\207\001\n\024FetchProductResponse\0220\n\007product\030"
  "\001 \001(\0132\037.gRPCTest.Protos.Models.Product\022="
  "\n\014error_status\030\002 \001(\0132\'.gRPCTest.Protos.S"
  "ervices.ServiceStatus\"\211\001\n\025FetchProductsR"
  "esponse\0221\n\010products\030\001 \003(\0132\037.gRPCTest.Pro"
  "tos.Models.Product\022=\n\014error_status\030\002 \001(\013"
  "2\'.gRPCTest.Protos.Services.ServiceStatu"
  "s2\273\003\n\016ProductService\022c\n\rCreateProduct\022\037."
  "gRPCTest.Protos.Models.Product\032/.gRPCTes"
  "t.Protos.Services.CreateProductResponse\""
  "\000\022n\n\014FetchProduct\022,.gRPCTest.Protos.Serv"
  "ices.ProductByIdRequest\032..gRPCTest.Proto"
  "s.Services.FetchProductResponse\"\000\022Z\n\rFet"
  "chProducts\022\026.google.protobuf.Empty\032/.gRP"
  "CTest.Protos.Services.FetchProductsRespo"
  "nse\"\000\022x\n\024FetchProductsByPrice\022-.gRPCTest"
  ".Protos.Services.ProductPriceRequest\032/.g"
  "RPCTest.Protos.Services.FetchProductsRes"
  "ponse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_services_2fProductService_2eproto_deps[3] = {
  &::descriptor_table_common_2fServiceStatus_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_models_2fProduct_2eproto,
};
static ::_pbi::once_flag descriptor_table_services_2fProductService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2fProductService_2eproto = {
    false, false, 1095, descriptor_table_protodef_services_2fProductService_2eproto,
    "services/ProductService.proto",
    &descriptor_table_services_2fProductService_2eproto_once, descriptor_table_services_2fProductService_2eproto_deps, 3, 5,
    schemas, file_default_instances, TableStruct_services_2fProductService_2eproto::offsets,
    file_level_metadata_services_2fProductService_2eproto, file_level_enum_descriptors_services_2fProductService_2eproto,
    file_level_service_descriptors_services_2fProductService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2fProductService_2eproto_getter() {
  return &descriptor_table_services_2fProductService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2fProductService_2eproto(&descriptor_table_services_2fProductService_2eproto);
namespace gRPCTest {
namespace Protos {
namespace Services {

// ===================================================================

class ProductByIdRequest::_Internal {
 public:
};

ProductByIdRequest::ProductByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gRPCTest.Protos.Services.ProductByIdRequest)
}
ProductByIdRequest::ProductByIdRequest(const ProductByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProductByIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.product_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.product_id_ = from._impl_.product_id_;
  // @@protoc_insertion_point(copy_constructor:gRPCTest.Protos.Services.ProductByIdRequest)
}

inline void ProductByIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.product_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProductByIdRequest::~ProductByIdRequest() {
  // @@protoc_insertion_point(destructor:gRPCTest.Protos.Services.ProductByIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProductByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProductByIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProductByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCTest.Protos.Services.ProductByIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.product_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductByIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 product_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProductByIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCTest.Protos.Services.ProductByIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 product_id = 1;
  if (this->_internal_product_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_product_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCTest.Protos.Services.ProductByIdRequest)
  return target;
}

size_t ProductByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCTest.Protos.Services.ProductByIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 product_id = 1;
  if (this->_internal_product_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_product_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProductByIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProductByIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProductByIdRequest::GetClassData() const { return &_class_data_; }


void ProductByIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProductByIdRequest*>(&to_msg);
  auto& from = static_cast<const ProductByIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gRPCTest.Protos.Services.ProductByIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_product_id() != 0) {
    _this->_internal_set_product_id(from._internal_product_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProductByIdRequest::CopyFrom(const ProductByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCTest.Protos.Services.ProductByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductByIdRequest::IsInitialized() const {
  return true;
}

void ProductByIdRequest::InternalSwap(ProductByIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.product_id_, other->_impl_.product_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductByIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fProductService_2eproto_getter, &descriptor_table_services_2fProductService_2eproto_once,
      file_level_metadata_services_2fProductService_2eproto[0]);
}

// ===================================================================

class ProductPriceRequest::_Internal {
 public:
};

ProductPriceRequest::ProductPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gRPCTest.Protos.Services.ProductPriceRequest)
}
ProductPriceRequest::ProductPriceRequest(const ProductPriceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProductPriceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.product_price_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.product_price_ = from._impl_.product_price_;
  // @@protoc_insertion_point(copy_constructor:gRPCTest.Protos.Services.ProductPriceRequest)
}

inline void ProductPriceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.product_price_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProductPriceRequest::~ProductPriceRequest() {
  // @@protoc_insertion_point(destructor:gRPCTest.Protos.Services.ProductPriceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProductPriceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProductPriceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProductPriceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCTest.Protos.Services.ProductPriceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.product_price_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductPriceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double product_price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.product_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProductPriceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCTest.Protos.Services.ProductPriceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double product_price = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_product_price = this->_internal_product_price();
  uint64_t raw_product_price;
  memcpy(&raw_product_price, &tmp_product_price, sizeof(tmp_product_price));
  if (raw_product_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_product_price(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCTest.Protos.Services.ProductPriceRequest)
  return target;
}

size_t ProductPriceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCTest.Protos.Services.ProductPriceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double product_price = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_product_price = this->_internal_product_price();
  uint64_t raw_product_price;
  memcpy(&raw_product_price, &tmp_product_price, sizeof(tmp_product_price));
  if (raw_product_price != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProductPriceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProductPriceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProductPriceRequest::GetClassData() const { return &_class_data_; }


void ProductPriceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProductPriceRequest*>(&to_msg);
  auto& from = static_cast<const ProductPriceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gRPCTest.Protos.Services.ProductPriceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_product_price = from._internal_product_price();
  uint64_t raw_product_price;
  memcpy(&raw_product_price, &tmp_product_price, sizeof(tmp_product_price));
  if (raw_product_price != 0) {
    _this->_internal_set_product_price(from._internal_product_price());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProductPriceRequest::CopyFrom(const ProductPriceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCTest.Protos.Services.ProductPriceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductPriceRequest::IsInitialized() const {
  return true;
}

void ProductPriceRequest::InternalSwap(ProductPriceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.product_price_, other->_impl_.product_price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductPriceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fProductService_2eproto_getter, &descriptor_table_services_2fProductService_2eproto_once,
      file_level_metadata_services_2fProductService_2eproto[1]);
}

// ===================================================================

class CreateProductResponse::_Internal {
 public:
  static const ::gRPCTest::Protos::Models::Product& product(const CreateProductResponse* msg);
  static const ::gRPCTest::Protos::Services::ServiceStatus& error_status(const CreateProductResponse* msg);
};

const ::gRPCTest::Protos::Models::Product&
CreateProductResponse::_Internal::product(const CreateProductResponse* msg) {
  return *msg->_impl_.product_;
}
const ::gRPCTest::Protos::Services::ServiceStatus&
CreateProductResponse::_Internal::error_status(const CreateProductResponse* msg) {
  return *msg->_impl_.error_status_;
}
void CreateProductResponse::clear_product() {
  if (GetArenaForAllocation() == nullptr && _impl_.product_ != nullptr) {
    delete _impl_.product_;
  }
  _impl_.product_ = nullptr;
}
void CreateProductResponse::clear_error_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
}
CreateProductResponse::CreateProductResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gRPCTest.Protos.Services.CreateProductResponse)
}
CreateProductResponse::CreateProductResponse(const CreateProductResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateProductResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.product_){nullptr}
    , decltype(_impl_.error_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_product()) {
    _this->_impl_.product_ = new ::gRPCTest::Protos::Models::Product(*from._impl_.product_);
  }
  if (from._internal_has_error_status()) {
    _this->_impl_.error_status_ = new ::gRPCTest::Protos::Services::ServiceStatus(*from._impl_.error_status_);
  }
  // @@protoc_insertion_point(copy_constructor:gRPCTest.Protos.Services.CreateProductResponse)
}

inline void CreateProductResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.product_){nullptr}
    , decltype(_impl_.error_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateProductResponse::~CreateProductResponse() {
  // @@protoc_insertion_point(destructor:gRPCTest.Protos.Services.CreateProductResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateProductResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.product_;
  if (this != internal_default_instance()) delete _impl_.error_status_;
}

void CreateProductResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateProductResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCTest.Protos.Services.CreateProductResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.product_ != nullptr) {
    delete _impl_.product_;
  }
  _impl_.product_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateProductResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gRPCTest.Protos.Models.Product product = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateProductResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCTest.Protos.Services.CreateProductResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gRPCTest.Protos.Models.Product product = 1;
  if (this->_internal_has_product()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::product(this),
        _Internal::product(this).GetCachedSize(), target, stream);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  if (this->_internal_has_error_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error_status(this),
        _Internal::error_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCTest.Protos.Services.CreateProductResponse)
  return target;
}

size_t CreateProductResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCTest.Protos.Services.CreateProductResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gRPCTest.Protos.Models.Product product = 1;
  if (this->_internal_has_product()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.product_);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  if (this->_internal_has_error_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateProductResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateProductResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateProductResponse::GetClassData() const { return &_class_data_; }


void CreateProductResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateProductResponse*>(&to_msg);
  auto& from = static_cast<const CreateProductResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gRPCTest.Protos.Services.CreateProductResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_product()) {
    _this->_internal_mutable_product()->::gRPCTest::Protos::Models::Product::MergeFrom(
        from._internal_product());
  }
  if (from._internal_has_error_status()) {
    _this->_internal_mutable_error_status()->::gRPCTest::Protos::Services::ServiceStatus::MergeFrom(
        from._internal_error_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateProductResponse::CopyFrom(const CreateProductResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCTest.Protos.Services.CreateProductResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProductResponse::IsInitialized() const {
  return true;
}

void CreateProductResponse::InternalSwap(CreateProductResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateProductResponse, _impl_.error_status_)
      + sizeof(CreateProductResponse::_impl_.error_status_)
      - PROTOBUF_FIELD_OFFSET(CreateProductResponse, _impl_.product_)>(
          reinterpret_cast<char*>(&_impl_.product_),
          reinterpret_cast<char*>(&other->_impl_.product_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProductResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fProductService_2eproto_getter, &descriptor_table_services_2fProductService_2eproto_once,
      file_level_metadata_services_2fProductService_2eproto[2]);
}

// ===================================================================

class FetchProductResponse::_Internal {
 public:
  static const ::gRPCTest::Protos::Models::Product& product(const FetchProductResponse* msg);
  static const ::gRPCTest::Protos::Services::ServiceStatus& error_status(const FetchProductResponse* msg);
};

const ::gRPCTest::Protos::Models::Product&
FetchProductResponse::_Internal::product(const FetchProductResponse* msg) {
  return *msg->_impl_.product_;
}
const ::gRPCTest::Protos::Services::ServiceStatus&
FetchProductResponse::_Internal::error_status(const FetchProductResponse* msg) {
  return *msg->_impl_.error_status_;
}
void FetchProductResponse::clear_product() {
  if (GetArenaForAllocation() == nullptr && _impl_.product_ != nullptr) {
    delete _impl_.product_;
  }
  _impl_.product_ = nullptr;
}
void FetchProductResponse::clear_error_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
}
FetchProductResponse::FetchProductResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gRPCTest.Protos.Services.FetchProductResponse)
}
FetchProductResponse::FetchProductResponse(const FetchProductResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchProductResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.product_){nullptr}
    , decltype(_impl_.error_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_product()) {
    _this->_impl_.product_ = new ::gRPCTest::Protos::Models::Product(*from._impl_.product_);
  }
  if (from._internal_has_error_status()) {
    _this->_impl_.error_status_ = new ::gRPCTest::Protos::Services::ServiceStatus(*from._impl_.error_status_);
  }
  // @@protoc_insertion_point(copy_constructor:gRPCTest.Protos.Services.FetchProductResponse)
}

inline void FetchProductResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.product_){nullptr}
    , decltype(_impl_.error_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FetchProductResponse::~FetchProductResponse() {
  // @@protoc_insertion_point(destructor:gRPCTest.Protos.Services.FetchProductResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchProductResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.product_;
  if (this != internal_default_instance()) delete _impl_.error_status_;
}

void FetchProductResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchProductResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCTest.Protos.Services.FetchProductResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.product_ != nullptr) {
    delete _impl_.product_;
  }
  _impl_.product_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchProductResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gRPCTest.Protos.Models.Product product = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_product(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchProductResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCTest.Protos.Services.FetchProductResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gRPCTest.Protos.Models.Product product = 1;
  if (this->_internal_has_product()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::product(this),
        _Internal::product(this).GetCachedSize(), target, stream);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  if (this->_internal_has_error_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error_status(this),
        _Internal::error_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCTest.Protos.Services.FetchProductResponse)
  return target;
}

size_t FetchProductResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCTest.Protos.Services.FetchProductResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gRPCTest.Protos.Models.Product product = 1;
  if (this->_internal_has_product()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.product_);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  if (this->_internal_has_error_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchProductResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchProductResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchProductResponse::GetClassData() const { return &_class_data_; }


void FetchProductResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchProductResponse*>(&to_msg);
  auto& from = static_cast<const FetchProductResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gRPCTest.Protos.Services.FetchProductResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_product()) {
    _this->_internal_mutable_product()->::gRPCTest::Protos::Models::Product::MergeFrom(
        from._internal_product());
  }
  if (from._internal_has_error_status()) {
    _this->_internal_mutable_error_status()->::gRPCTest::Protos::Services::ServiceStatus::MergeFrom(
        from._internal_error_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchProductResponse::CopyFrom(const FetchProductResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCTest.Protos.Services.FetchProductResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchProductResponse::IsInitialized() const {
  return true;
}

void FetchProductResponse::InternalSwap(FetchProductResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchProductResponse, _impl_.error_status_)
      + sizeof(FetchProductResponse::_impl_.error_status_)
      - PROTOBUF_FIELD_OFFSET(FetchProductResponse, _impl_.product_)>(
          reinterpret_cast<char*>(&_impl_.product_),
          reinterpret_cast<char*>(&other->_impl_.product_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchProductResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fProductService_2eproto_getter, &descriptor_table_services_2fProductService_2eproto_once,
      file_level_metadata_services_2fProductService_2eproto[3]);
}

// ===================================================================

class FetchProductsResponse::_Internal {
 public:
  static const ::gRPCTest::Protos::Services::ServiceStatus& error_status(const FetchProductsResponse* msg);
};

const ::gRPCTest::Protos::Services::ServiceStatus&
FetchProductsResponse::_Internal::error_status(const FetchProductsResponse* msg) {
  return *msg->_impl_.error_status_;
}
void FetchProductsResponse::clear_products() {
  _impl_.products_.Clear();
}
void FetchProductsResponse::clear_error_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
}
FetchProductsResponse::FetchProductsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gRPCTest.Protos.Services.FetchProductsResponse)
}
FetchProductsResponse::FetchProductsResponse(const FetchProductsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchProductsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.products_){from._impl_.products_}
    , decltype(_impl_.error_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error_status()) {
    _this->_impl_.error_status_ = new ::gRPCTest::Protos::Services::ServiceStatus(*from._impl_.error_status_);
  }
  // @@protoc_insertion_point(copy_constructor:gRPCTest.Protos.Services.FetchProductsResponse)
}

inline void FetchProductsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.products_){arena}
    , decltype(_impl_.error_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FetchProductsResponse::~FetchProductsResponse() {
  // @@protoc_insertion_point(destructor:gRPCTest.Protos.Services.FetchProductsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchProductsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.products_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.error_status_;
}

void FetchProductsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchProductsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCTest.Protos.Services.FetchProductsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.products_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchProductsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gRPCTest.Protos.Models.Product products = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_products(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchProductsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCTest.Protos.Services.FetchProductsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gRPCTest.Protos.Models.Product products = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_products_size()); i < n; i++) {
    const auto& repfield = this->_internal_products(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  if (this->_internal_has_error_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error_status(this),
        _Internal::error_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCTest.Protos.Services.FetchProductsResponse)
  return target;
}

size_t FetchProductsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCTest.Protos.Services.FetchProductsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gRPCTest.Protos.Models.Product products = 1;
  total_size += 1UL * this->_internal_products_size();
  for (const auto& msg : this->_impl_.products_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  if (this->_internal_has_error_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchProductsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchProductsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchProductsResponse::GetClassData() const { return &_class_data_; }


void FetchProductsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchProductsResponse*>(&to_msg);
  auto& from = static_cast<const FetchProductsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gRPCTest.Protos.Services.FetchProductsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.products_.MergeFrom(from._impl_.products_);
  if (from._internal_has_error_status()) {
    _this->_internal_mutable_error_status()->::gRPCTest::Protos::Services::ServiceStatus::MergeFrom(
        from._internal_error_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchProductsResponse::CopyFrom(const FetchProductsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCTest.Protos.Services.FetchProductsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchProductsResponse::IsInitialized() const {
  return true;
}

void FetchProductsResponse::InternalSwap(FetchProductsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.products_.InternalSwap(&other->_impl_.products_);
  swap(_impl_.error_status_, other->_impl_.error_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchProductsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fProductService_2eproto_getter, &descriptor_table_services_2fProductService_2eproto_once,
      file_level_metadata_services_2fProductService_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gRPCTest::Protos::Services::ProductByIdRequest*
Arena::CreateMaybeMessage< ::gRPCTest::Protos::Services::ProductByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gRPCTest::Protos::Services::ProductByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gRPCTest::Protos::Services::ProductPriceRequest*
Arena::CreateMaybeMessage< ::gRPCTest::Protos::Services::ProductPriceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gRPCTest::Protos::Services::ProductPriceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gRPCTest::Protos::Services::CreateProductResponse*
Arena::CreateMaybeMessage< ::gRPCTest::Protos::Services::CreateProductResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gRPCTest::Protos::Services::CreateProductResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gRPCTest::Protos::Services::FetchProductResponse*
Arena::CreateMaybeMessage< ::gRPCTest::Protos::Services::FetchProductResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gRPCTest::Protos::Services::FetchProductResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gRPCTest::Protos::Services::FetchProductsResponse*
Arena::CreateMaybeMessage< ::gRPCTest::Protos::Services::FetchProductsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gRPCTest::Protos::Services::FetchProductsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
