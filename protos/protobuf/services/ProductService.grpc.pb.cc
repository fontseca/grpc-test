// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/ProductService.proto

#include "services/ProductService.pb.h"
#include "services/ProductService.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace gRPCTest {
namespace Protos {
namespace Services {

static const char* ProductService_method_names[] = {
  "/gRPCTest.Protos.Services.ProductService/CreateProduct",
  "/gRPCTest.Protos.Services.ProductService/FetchProduct",
  "/gRPCTest.Protos.Services.ProductService/FetchProducts",
  "/gRPCTest.Protos.Services.ProductService/FetchProductsByPrice",
};

std::unique_ptr< ProductService::Stub> ProductService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ProductService::Stub> stub(new ProductService::Stub(channel, options));
  return stub;
}

ProductService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateProduct_(ProductService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchProduct_(ProductService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchProducts_(ProductService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FetchProductsByPrice_(ProductService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ProductService::Stub::CreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::gRPCTest::Protos::Services::CreateProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gRPCTest::Protos::Models::Product, ::gRPCTest::Protos::Services::CreateProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateProduct_, context, request, response);
}

void ProductService::Stub::async::CreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product* request, ::gRPCTest::Protos::Services::CreateProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gRPCTest::Protos::Models::Product, ::gRPCTest::Protos::Services::CreateProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProduct_, context, request, response, std::move(f));
}

void ProductService::Stub::async::CreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product* request, ::gRPCTest::Protos::Services::CreateProductResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateProductResponse>* ProductService::Stub::PrepareAsyncCreateProductRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gRPCTest::Protos::Services::CreateProductResponse, ::gRPCTest::Protos::Models::Product, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateProduct_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateProductResponse>* ProductService::Stub::AsyncCreateProductRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateProductRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::FetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::gRPCTest::Protos::Services::FetchProductResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gRPCTest::Protos::Services::ProductByIdRequest, ::gRPCTest::Protos::Services::FetchProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FetchProduct_, context, request, response);
}

void ProductService::Stub::async::FetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest* request, ::gRPCTest::Protos::Services::FetchProductResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gRPCTest::Protos::Services::ProductByIdRequest, ::gRPCTest::Protos::Services::FetchProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchProduct_, context, request, response, std::move(f));
}

void ProductService::Stub::async::FetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest* request, ::gRPCTest::Protos::Services::FetchProductResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchProduct_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductResponse>* ProductService::Stub::PrepareAsyncFetchProductRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gRPCTest::Protos::Services::FetchProductResponse, ::gRPCTest::Protos::Services::ProductByIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FetchProduct_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductResponse>* ProductService::Stub::AsyncFetchProductRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchProductRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::FetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::gRPCTest::Protos::Services::FetchProductsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FetchProducts_, context, request, response);
}

void ProductService::Stub::async::FetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchProducts_, context, request, response, std::move(f));
}

void ProductService::Stub::async::FetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchProducts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>* ProductService::Stub::PrepareAsyncFetchProductsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gRPCTest::Protos::Services::FetchProductsResponse, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FetchProducts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>* ProductService::Stub::AsyncFetchProductsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchProductsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ProductService::Stub::FetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::gRPCTest::Protos::Services::FetchProductsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::gRPCTest::Protos::Services::ProductPriceRequest, ::gRPCTest::Protos::Services::FetchProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FetchProductsByPrice_, context, request, response);
}

void ProductService::Stub::async::FetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::gRPCTest::Protos::Services::ProductPriceRequest, ::gRPCTest::Protos::Services::FetchProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchProductsByPrice_, context, request, response, std::move(f));
}

void ProductService::Stub::async::FetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FetchProductsByPrice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>* ProductService::Stub::PrepareAsyncFetchProductsByPriceRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::gRPCTest::Protos::Services::FetchProductsResponse, ::gRPCTest::Protos::Services::ProductPriceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FetchProductsByPrice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>* ProductService::Stub::AsyncFetchProductsByPriceRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFetchProductsByPriceRaw(context, request, cq);
  result->StartCall();
  return result;
}

ProductService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::gRPCTest::Protos::Models::Product, ::gRPCTest::Protos::Services::CreateProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gRPCTest::Protos::Models::Product* req,
             ::gRPCTest::Protos::Services::CreateProductResponse* resp) {
               return service->CreateProduct(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::gRPCTest::Protos::Services::ProductByIdRequest, ::gRPCTest::Protos::Services::FetchProductResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gRPCTest::Protos::Services::ProductByIdRequest* req,
             ::gRPCTest::Protos::Services::FetchProductResponse* resp) {
               return service->FetchProduct(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::protobuf::Empty* req,
             ::gRPCTest::Protos::Services::FetchProductsResponse* resp) {
               return service->FetchProducts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ProductService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ProductService::Service, ::gRPCTest::Protos::Services::ProductPriceRequest, ::gRPCTest::Protos::Services::FetchProductsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ProductService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::gRPCTest::Protos::Services::ProductPriceRequest* req,
             ::gRPCTest::Protos::Services::FetchProductsResponse* resp) {
               return service->FetchProductsByPrice(ctx, req, resp);
             }, this)));
}

ProductService::Service::~Service() {
}

::grpc::Status ProductService::Service::CreateProduct(::grpc::ServerContext* context, const ::gRPCTest::Protos::Models::Product* request, ::gRPCTest::Protos::Services::CreateProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::FetchProduct(::grpc::ServerContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest* request, ::gRPCTest::Protos::Services::FetchProductResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::FetchProducts(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ProductService::Service::FetchProductsByPrice(::grpc::ServerContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace gRPCTest
}  // namespace Protos
}  // namespace Services

