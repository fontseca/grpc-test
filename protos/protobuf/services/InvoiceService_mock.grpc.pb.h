// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/InvoiceService.proto

#include "services/InvoiceService.pb.h"
#include "services/InvoiceService.grpc.pb.h"

#include <grpcpp/support/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace gRPCTest {
namespace Protos {
namespace Services {

class MockInvoiceServiceStub : public InvoiceService::StubInterface {
 public:
  MOCK_METHOD3(RegisterInvoice, ::grpc::Status(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* response));
  MOCK_METHOD3(AsyncRegisterInvoiceRaw, ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>*(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncRegisterInvoiceRaw, ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>*(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(FetchInvoiceById, ::grpc::Status(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* response));
  MOCK_METHOD3(AsyncFetchInvoiceByIdRaw, ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>*(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncFetchInvoiceByIdRaw, ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>*(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(FetchInvoiceByDate, ::grpc::Status(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* response));
  MOCK_METHOD3(AsyncFetchInvoiceByDateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>*(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncFetchInvoiceByDateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>*(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(FetchInvoiceDetails, ::grpc::Status(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* response));
  MOCK_METHOD3(AsyncFetchInvoiceDetailsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>*(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncFetchInvoiceDetailsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>*(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(FetchInvoices, ::grpc::Status(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::gRPCTest::Protos::Services::FetchInvoicesResponse* response));
  MOCK_METHOD3(AsyncFetchInvoicesRaw, ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoicesResponse>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncFetchInvoicesRaw, ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoicesResponse>*(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq));
};

} // namespace gRPCTest
} // namespace Protos
} // namespace Services

