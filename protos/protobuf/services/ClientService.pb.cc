// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/ClientService.proto

#include "services/ClientService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace gRPCTest {
namespace Protos {
namespace Services {
PROTOBUF_CONSTEXPR ClientByIdRequest::ClientByIdRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientByIdRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientByIdRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientByIdRequestDefaultTypeInternal() {}
  union {
    ClientByIdRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientByIdRequestDefaultTypeInternal _ClientByIdRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateClientResponse::CreateClientResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_)*/nullptr
  , /*decltype(_impl_.error_status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateClientResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateClientResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateClientResponseDefaultTypeInternal() {}
  union {
    CreateClientResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateClientResponseDefaultTypeInternal _CreateClientResponse_default_instance_;
PROTOBUF_CONSTEXPR FetchClientByIdResponse::FetchClientByIdResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.client_)*/nullptr
  , /*decltype(_impl_.error_status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchClientByIdResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchClientByIdResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchClientByIdResponseDefaultTypeInternal() {}
  union {
    FetchClientByIdResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchClientByIdResponseDefaultTypeInternal _FetchClientByIdResponse_default_instance_;
PROTOBUF_CONSTEXPR FetchAllClientsResponse::FetchAllClientsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clients_)*/{}
  , /*decltype(_impl_.error_status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchAllClientsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchAllClientsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchAllClientsResponseDefaultTypeInternal() {}
  union {
    FetchAllClientsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchAllClientsResponseDefaultTypeInternal _FetchAllClientsResponse_default_instance_;
PROTOBUF_CONSTEXPR FetchClientInvoicesResponse::FetchClientInvoicesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.invoices_)*/{}
  , /*decltype(_impl_.error_status_)*/nullptr
  , /*decltype(_impl_.clinet_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FetchClientInvoicesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FetchClientInvoicesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FetchClientInvoicesResponseDefaultTypeInternal() {}
  union {
    FetchClientInvoicesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FetchClientInvoicesResponseDefaultTypeInternal _FetchClientInvoicesResponse_default_instance_;
}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest
static ::_pb::Metadata file_level_metadata_services_2fClientService_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_services_2fClientService_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_services_2fClientService_2eproto = nullptr;

const uint32_t TableStruct_services_2fClientService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::ClientByIdRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::ClientByIdRequest, _impl_.client_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::CreateClientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::CreateClientResponse, _impl_.client_),
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::CreateClientResponse, _impl_.error_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchClientByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchClientByIdResponse, _impl_.client_),
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchClientByIdResponse, _impl_.error_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchAllClientsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchAllClientsResponse, _impl_.clients_),
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchAllClientsResponse, _impl_.error_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchClientInvoicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchClientInvoicesResponse, _impl_.clinet_id_),
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchClientInvoicesResponse, _impl_.invoices_),
  PROTOBUF_FIELD_OFFSET(::gRPCTest::Protos::Services::FetchClientInvoicesResponse, _impl_.error_status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::gRPCTest::Protos::Services::ClientByIdRequest)},
  { 7, -1, -1, sizeof(::gRPCTest::Protos::Services::CreateClientResponse)},
  { 15, -1, -1, sizeof(::gRPCTest::Protos::Services::FetchClientByIdResponse)},
  { 23, -1, -1, sizeof(::gRPCTest::Protos::Services::FetchAllClientsResponse)},
  { 31, -1, -1, sizeof(::gRPCTest::Protos::Services::FetchClientInvoicesResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::gRPCTest::Protos::Services::_ClientByIdRequest_default_instance_._instance,
  &::gRPCTest::Protos::Services::_CreateClientResponse_default_instance_._instance,
  &::gRPCTest::Protos::Services::_FetchClientByIdResponse_default_instance_._instance,
  &::gRPCTest::Protos::Services::_FetchAllClientsResponse_default_instance_._instance,
  &::gRPCTest::Protos::Services::_FetchClientInvoicesResponse_default_instance_._instance,
};

const char descriptor_table_protodef_services_2fClientService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034services/ClientService.proto\022\030gRPCTest"
  ".Protos.Services\032\033google/protobuf/empty."
  "proto\032\024models/Invoice.proto\032\023models/Clie"
  "nt.proto\032\032common/ServiceStatus.proto\"&\n\021"
  "ClientByIdRequest\022\021\n\tclient_id\030\001 \001(\004\"\205\001\n"
  "\024CreateClientResponse\022.\n\006client\030\001 \001(\0132\036."
  "gRPCTest.Protos.Models.Client\022=\n\014error_s"
  "tatus\030\002 \001(\0132\'.gRPCTest.Protos.Services.S"
  "erviceStatus\"\210\001\n\027FetchClientByIdResponse"
  "\022.\n\006client\030\001 \001(\0132\036.gRPCTest.Protos.Model"
  "s.Client\022=\n\014error_status\030\002 \001(\0132\'.gRPCTes"
  "t.Protos.Services.ServiceStatus\"\211\001\n\027Fetc"
  "hAllClientsResponse\022/\n\007clients\030\001 \003(\0132\036.g"
  "RPCTest.Protos.Models.Client\022=\n\014error_st"
  "atus\030\002 \001(\0132\'.gRPCTest.Protos.Services.Se"
  "rviceStatus\"\242\001\n\033FetchClientInvoicesRespo"
  "nse\022\021\n\tclinet_id\030\001 \001(\004\0221\n\010invoices\030\002 \003(\013"
  "2\037.gRPCTest.Protos.Models.Invoice\022=\n\014err"
  "or_status\030\003 \001(\0132\'.gRPCTest.Protos.Servic"
  "es.ServiceStatus2\303\003\n\rClientService\022`\n\014Cr"
  "eateClient\022\036.gRPCTest.Protos.Models.Clie"
  "nt\032..gRPCTest.Protos.Services.CreateClie"
  "ntResponse\"\000\022s\n\017FetchClientById\022+.gRPCTe"
  "st.Protos.Services.ClientByIdRequest\0321.g"
  "RPCTest.Protos.Services.FetchClientByIdR"
  "esponse\"\000\022^\n\017FetchAllClients\022\026.google.pr"
  "otobuf.Empty\0321.gRPCTest.Protos.Services."
  "FetchAllClientsResponse\"\000\022{\n\023FetchClient"
  "Invoices\022+.gRPCTest.Protos.Services.Clie"
  "ntByIdRequest\0325.gRPCTest.Protos.Services"
  ".FetchClientInvoicesResponse\"\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_services_2fClientService_2eproto_deps[4] = {
  &::descriptor_table_common_2fServiceStatus_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_models_2fClient_2eproto,
  &::descriptor_table_models_2fInvoice_2eproto,
};
static ::_pbi::once_flag descriptor_table_services_2fClientService_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_services_2fClientService_2eproto = {
    false, false, 1238, descriptor_table_protodef_services_2fClientService_2eproto,
    "services/ClientService.proto",
    &descriptor_table_services_2fClientService_2eproto_once, descriptor_table_services_2fClientService_2eproto_deps, 4, 5,
    schemas, file_default_instances, TableStruct_services_2fClientService_2eproto::offsets,
    file_level_metadata_services_2fClientService_2eproto, file_level_enum_descriptors_services_2fClientService_2eproto,
    file_level_service_descriptors_services_2fClientService_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_services_2fClientService_2eproto_getter() {
  return &descriptor_table_services_2fClientService_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_services_2fClientService_2eproto(&descriptor_table_services_2fClientService_2eproto);
namespace gRPCTest {
namespace Protos {
namespace Services {

// ===================================================================

class ClientByIdRequest::_Internal {
 public:
};

ClientByIdRequest::ClientByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gRPCTest.Protos.Services.ClientByIdRequest)
}
ClientByIdRequest::ClientByIdRequest(const ClientByIdRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientByIdRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.client_id_ = from._impl_.client_id_;
  // @@protoc_insertion_point(copy_constructor:gRPCTest.Protos.Services.ClientByIdRequest)
}

inline void ClientByIdRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientByIdRequest::~ClientByIdRequest() {
  // @@protoc_insertion_point(destructor:gRPCTest.Protos.Services.ClientByIdRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientByIdRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientByIdRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientByIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCTest.Protos.Services.ClientByIdRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.client_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientByIdRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientByIdRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCTest.Protos.Services.ClientByIdRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCTest.Protos.Services.ClientByIdRequest)
  return target;
}

size_t ClientByIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCTest.Protos.Services.ClientByIdRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 client_id = 1;
  if (this->_internal_client_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_client_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientByIdRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientByIdRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientByIdRequest::GetClassData() const { return &_class_data_; }


void ClientByIdRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientByIdRequest*>(&to_msg);
  auto& from = static_cast<const ClientByIdRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gRPCTest.Protos.Services.ClientByIdRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_client_id() != 0) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientByIdRequest::CopyFrom(const ClientByIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCTest.Protos.Services.ClientByIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientByIdRequest::IsInitialized() const {
  return true;
}

void ClientByIdRequest::InternalSwap(ClientByIdRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.client_id_, other->_impl_.client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientByIdRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fClientService_2eproto_getter, &descriptor_table_services_2fClientService_2eproto_once,
      file_level_metadata_services_2fClientService_2eproto[0]);
}

// ===================================================================

class CreateClientResponse::_Internal {
 public:
  static const ::gRPCTest::Protos::Models::Client& client(const CreateClientResponse* msg);
  static const ::gRPCTest::Protos::Services::ServiceStatus& error_status(const CreateClientResponse* msg);
};

const ::gRPCTest::Protos::Models::Client&
CreateClientResponse::_Internal::client(const CreateClientResponse* msg) {
  return *msg->_impl_.client_;
}
const ::gRPCTest::Protos::Services::ServiceStatus&
CreateClientResponse::_Internal::error_status(const CreateClientResponse* msg) {
  return *msg->_impl_.error_status_;
}
void CreateClientResponse::clear_client() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_ != nullptr) {
    delete _impl_.client_;
  }
  _impl_.client_ = nullptr;
}
void CreateClientResponse::clear_error_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
}
CreateClientResponse::CreateClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gRPCTest.Protos.Services.CreateClientResponse)
}
CreateClientResponse::CreateClientResponse(const CreateClientResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateClientResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_){nullptr}
    , decltype(_impl_.error_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client()) {
    _this->_impl_.client_ = new ::gRPCTest::Protos::Models::Client(*from._impl_.client_);
  }
  if (from._internal_has_error_status()) {
    _this->_impl_.error_status_ = new ::gRPCTest::Protos::Services::ServiceStatus(*from._impl_.error_status_);
  }
  // @@protoc_insertion_point(copy_constructor:gRPCTest.Protos.Services.CreateClientResponse)
}

inline void CreateClientResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_){nullptr}
    , decltype(_impl_.error_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateClientResponse::~CreateClientResponse() {
  // @@protoc_insertion_point(destructor:gRPCTest.Protos.Services.CreateClientResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateClientResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.client_;
  if (this != internal_default_instance()) delete _impl_.error_status_;
}

void CreateClientResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCTest.Protos.Services.CreateClientResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.client_ != nullptr) {
    delete _impl_.client_;
  }
  _impl_.client_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateClientResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gRPCTest.Protos.Models.Client client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateClientResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCTest.Protos.Services.CreateClientResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gRPCTest.Protos.Models.Client client = 1;
  if (this->_internal_has_client()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client(this),
        _Internal::client(this).GetCachedSize(), target, stream);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  if (this->_internal_has_error_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error_status(this),
        _Internal::error_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCTest.Protos.Services.CreateClientResponse)
  return target;
}

size_t CreateClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCTest.Protos.Services.CreateClientResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gRPCTest.Protos.Models.Client client = 1;
  if (this->_internal_has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  if (this->_internal_has_error_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateClientResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateClientResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateClientResponse::GetClassData() const { return &_class_data_; }


void CreateClientResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateClientResponse*>(&to_msg);
  auto& from = static_cast<const CreateClientResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gRPCTest.Protos.Services.CreateClientResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client()) {
    _this->_internal_mutable_client()->::gRPCTest::Protos::Models::Client::MergeFrom(
        from._internal_client());
  }
  if (from._internal_has_error_status()) {
    _this->_internal_mutable_error_status()->::gRPCTest::Protos::Services::ServiceStatus::MergeFrom(
        from._internal_error_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateClientResponse::CopyFrom(const CreateClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCTest.Protos.Services.CreateClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateClientResponse::IsInitialized() const {
  return true;
}

void CreateClientResponse::InternalSwap(CreateClientResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateClientResponse, _impl_.error_status_)
      + sizeof(CreateClientResponse::_impl_.error_status_)
      - PROTOBUF_FIELD_OFFSET(CreateClientResponse, _impl_.client_)>(
          reinterpret_cast<char*>(&_impl_.client_),
          reinterpret_cast<char*>(&other->_impl_.client_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateClientResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fClientService_2eproto_getter, &descriptor_table_services_2fClientService_2eproto_once,
      file_level_metadata_services_2fClientService_2eproto[1]);
}

// ===================================================================

class FetchClientByIdResponse::_Internal {
 public:
  static const ::gRPCTest::Protos::Models::Client& client(const FetchClientByIdResponse* msg);
  static const ::gRPCTest::Protos::Services::ServiceStatus& error_status(const FetchClientByIdResponse* msg);
};

const ::gRPCTest::Protos::Models::Client&
FetchClientByIdResponse::_Internal::client(const FetchClientByIdResponse* msg) {
  return *msg->_impl_.client_;
}
const ::gRPCTest::Protos::Services::ServiceStatus&
FetchClientByIdResponse::_Internal::error_status(const FetchClientByIdResponse* msg) {
  return *msg->_impl_.error_status_;
}
void FetchClientByIdResponse::clear_client() {
  if (GetArenaForAllocation() == nullptr && _impl_.client_ != nullptr) {
    delete _impl_.client_;
  }
  _impl_.client_ = nullptr;
}
void FetchClientByIdResponse::clear_error_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
}
FetchClientByIdResponse::FetchClientByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gRPCTest.Protos.Services.FetchClientByIdResponse)
}
FetchClientByIdResponse::FetchClientByIdResponse(const FetchClientByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchClientByIdResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.client_){nullptr}
    , decltype(_impl_.error_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_client()) {
    _this->_impl_.client_ = new ::gRPCTest::Protos::Models::Client(*from._impl_.client_);
  }
  if (from._internal_has_error_status()) {
    _this->_impl_.error_status_ = new ::gRPCTest::Protos::Services::ServiceStatus(*from._impl_.error_status_);
  }
  // @@protoc_insertion_point(copy_constructor:gRPCTest.Protos.Services.FetchClientByIdResponse)
}

inline void FetchClientByIdResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.client_){nullptr}
    , decltype(_impl_.error_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FetchClientByIdResponse::~FetchClientByIdResponse() {
  // @@protoc_insertion_point(destructor:gRPCTest.Protos.Services.FetchClientByIdResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchClientByIdResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.client_;
  if (this != internal_default_instance()) delete _impl_.error_status_;
}

void FetchClientByIdResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchClientByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCTest.Protos.Services.FetchClientByIdResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.client_ != nullptr) {
    delete _impl_.client_;
  }
  _impl_.client_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchClientByIdResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .gRPCTest.Protos.Models.Client client = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchClientByIdResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCTest.Protos.Services.FetchClientByIdResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .gRPCTest.Protos.Models.Client client = 1;
  if (this->_internal_has_client()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::client(this),
        _Internal::client(this).GetCachedSize(), target, stream);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  if (this->_internal_has_error_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error_status(this),
        _Internal::error_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCTest.Protos.Services.FetchClientByIdResponse)
  return target;
}

size_t FetchClientByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCTest.Protos.Services.FetchClientByIdResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .gRPCTest.Protos.Models.Client client = 1;
  if (this->_internal_has_client()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.client_);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  if (this->_internal_has_error_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchClientByIdResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchClientByIdResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchClientByIdResponse::GetClassData() const { return &_class_data_; }


void FetchClientByIdResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchClientByIdResponse*>(&to_msg);
  auto& from = static_cast<const FetchClientByIdResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gRPCTest.Protos.Services.FetchClientByIdResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_client()) {
    _this->_internal_mutable_client()->::gRPCTest::Protos::Models::Client::MergeFrom(
        from._internal_client());
  }
  if (from._internal_has_error_status()) {
    _this->_internal_mutable_error_status()->::gRPCTest::Protos::Services::ServiceStatus::MergeFrom(
        from._internal_error_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchClientByIdResponse::CopyFrom(const FetchClientByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCTest.Protos.Services.FetchClientByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchClientByIdResponse::IsInitialized() const {
  return true;
}

void FetchClientByIdResponse::InternalSwap(FetchClientByIdResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchClientByIdResponse, _impl_.error_status_)
      + sizeof(FetchClientByIdResponse::_impl_.error_status_)
      - PROTOBUF_FIELD_OFFSET(FetchClientByIdResponse, _impl_.client_)>(
          reinterpret_cast<char*>(&_impl_.client_),
          reinterpret_cast<char*>(&other->_impl_.client_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchClientByIdResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fClientService_2eproto_getter, &descriptor_table_services_2fClientService_2eproto_once,
      file_level_metadata_services_2fClientService_2eproto[2]);
}

// ===================================================================

class FetchAllClientsResponse::_Internal {
 public:
  static const ::gRPCTest::Protos::Services::ServiceStatus& error_status(const FetchAllClientsResponse* msg);
};

const ::gRPCTest::Protos::Services::ServiceStatus&
FetchAllClientsResponse::_Internal::error_status(const FetchAllClientsResponse* msg) {
  return *msg->_impl_.error_status_;
}
void FetchAllClientsResponse::clear_clients() {
  _impl_.clients_.Clear();
}
void FetchAllClientsResponse::clear_error_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
}
FetchAllClientsResponse::FetchAllClientsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gRPCTest.Protos.Services.FetchAllClientsResponse)
}
FetchAllClientsResponse::FetchAllClientsResponse(const FetchAllClientsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchAllClientsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clients_){from._impl_.clients_}
    , decltype(_impl_.error_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error_status()) {
    _this->_impl_.error_status_ = new ::gRPCTest::Protos::Services::ServiceStatus(*from._impl_.error_status_);
  }
  // @@protoc_insertion_point(copy_constructor:gRPCTest.Protos.Services.FetchAllClientsResponse)
}

inline void FetchAllClientsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clients_){arena}
    , decltype(_impl_.error_status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FetchAllClientsResponse::~FetchAllClientsResponse() {
  // @@protoc_insertion_point(destructor:gRPCTest.Protos.Services.FetchAllClientsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchAllClientsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clients_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.error_status_;
}

void FetchAllClientsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchAllClientsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCTest.Protos.Services.FetchAllClientsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clients_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchAllClientsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .gRPCTest.Protos.Models.Client clients = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clients(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchAllClientsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCTest.Protos.Services.FetchAllClientsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gRPCTest.Protos.Models.Client clients = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_clients_size()); i < n; i++) {
    const auto& repfield = this->_internal_clients(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  if (this->_internal_has_error_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::error_status(this),
        _Internal::error_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCTest.Protos.Services.FetchAllClientsResponse)
  return target;
}

size_t FetchAllClientsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCTest.Protos.Services.FetchAllClientsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gRPCTest.Protos.Models.Client clients = 1;
  total_size += 1UL * this->_internal_clients_size();
  for (const auto& msg : this->_impl_.clients_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  if (this->_internal_has_error_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchAllClientsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchAllClientsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchAllClientsResponse::GetClassData() const { return &_class_data_; }


void FetchAllClientsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchAllClientsResponse*>(&to_msg);
  auto& from = static_cast<const FetchAllClientsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gRPCTest.Protos.Services.FetchAllClientsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.clients_.MergeFrom(from._impl_.clients_);
  if (from._internal_has_error_status()) {
    _this->_internal_mutable_error_status()->::gRPCTest::Protos::Services::ServiceStatus::MergeFrom(
        from._internal_error_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchAllClientsResponse::CopyFrom(const FetchAllClientsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCTest.Protos.Services.FetchAllClientsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchAllClientsResponse::IsInitialized() const {
  return true;
}

void FetchAllClientsResponse::InternalSwap(FetchAllClientsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.clients_.InternalSwap(&other->_impl_.clients_);
  swap(_impl_.error_status_, other->_impl_.error_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchAllClientsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fClientService_2eproto_getter, &descriptor_table_services_2fClientService_2eproto_once,
      file_level_metadata_services_2fClientService_2eproto[3]);
}

// ===================================================================

class FetchClientInvoicesResponse::_Internal {
 public:
  static const ::gRPCTest::Protos::Services::ServiceStatus& error_status(const FetchClientInvoicesResponse* msg);
};

const ::gRPCTest::Protos::Services::ServiceStatus&
FetchClientInvoicesResponse::_Internal::error_status(const FetchClientInvoicesResponse* msg) {
  return *msg->_impl_.error_status_;
}
void FetchClientInvoicesResponse::clear_invoices() {
  _impl_.invoices_.Clear();
}
void FetchClientInvoicesResponse::clear_error_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
}
FetchClientInvoicesResponse::FetchClientInvoicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:gRPCTest.Protos.Services.FetchClientInvoicesResponse)
}
FetchClientInvoicesResponse::FetchClientInvoicesResponse(const FetchClientInvoicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FetchClientInvoicesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.invoices_){from._impl_.invoices_}
    , decltype(_impl_.error_status_){nullptr}
    , decltype(_impl_.clinet_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_error_status()) {
    _this->_impl_.error_status_ = new ::gRPCTest::Protos::Services::ServiceStatus(*from._impl_.error_status_);
  }
  _this->_impl_.clinet_id_ = from._impl_.clinet_id_;
  // @@protoc_insertion_point(copy_constructor:gRPCTest.Protos.Services.FetchClientInvoicesResponse)
}

inline void FetchClientInvoicesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.invoices_){arena}
    , decltype(_impl_.error_status_){nullptr}
    , decltype(_impl_.clinet_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FetchClientInvoicesResponse::~FetchClientInvoicesResponse() {
  // @@protoc_insertion_point(destructor:gRPCTest.Protos.Services.FetchClientInvoicesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FetchClientInvoicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.invoices_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.error_status_;
}

void FetchClientInvoicesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FetchClientInvoicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gRPCTest.Protos.Services.FetchClientInvoicesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.invoices_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
  _impl_.clinet_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FetchClientInvoicesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 clinet_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.clinet_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .gRPCTest.Protos.Models.Invoice invoices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invoices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .gRPCTest.Protos.Services.ServiceStatus error_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FetchClientInvoicesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gRPCTest.Protos.Services.FetchClientInvoicesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 clinet_id = 1;
  if (this->_internal_clinet_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_clinet_id(), target);
  }

  // repeated .gRPCTest.Protos.Models.Invoice invoices = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_invoices_size()); i < n; i++) {
    const auto& repfield = this->_internal_invoices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 3;
  if (this->_internal_has_error_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::error_status(this),
        _Internal::error_status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gRPCTest.Protos.Services.FetchClientInvoicesResponse)
  return target;
}

size_t FetchClientInvoicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gRPCTest.Protos.Services.FetchClientInvoicesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gRPCTest.Protos.Models.Invoice invoices = 2;
  total_size += 1UL * this->_internal_invoices_size();
  for (const auto& msg : this->_impl_.invoices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 3;
  if (this->_internal_has_error_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_status_);
  }

  // uint64 clinet_id = 1;
  if (this->_internal_clinet_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_clinet_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FetchClientInvoicesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FetchClientInvoicesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FetchClientInvoicesResponse::GetClassData() const { return &_class_data_; }


void FetchClientInvoicesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FetchClientInvoicesResponse*>(&to_msg);
  auto& from = static_cast<const FetchClientInvoicesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:gRPCTest.Protos.Services.FetchClientInvoicesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.invoices_.MergeFrom(from._impl_.invoices_);
  if (from._internal_has_error_status()) {
    _this->_internal_mutable_error_status()->::gRPCTest::Protos::Services::ServiceStatus::MergeFrom(
        from._internal_error_status());
  }
  if (from._internal_clinet_id() != 0) {
    _this->_internal_set_clinet_id(from._internal_clinet_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FetchClientInvoicesResponse::CopyFrom(const FetchClientInvoicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gRPCTest.Protos.Services.FetchClientInvoicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FetchClientInvoicesResponse::IsInitialized() const {
  return true;
}

void FetchClientInvoicesResponse::InternalSwap(FetchClientInvoicesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.invoices_.InternalSwap(&other->_impl_.invoices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FetchClientInvoicesResponse, _impl_.clinet_id_)
      + sizeof(FetchClientInvoicesResponse::_impl_.clinet_id_)
      - PROTOBUF_FIELD_OFFSET(FetchClientInvoicesResponse, _impl_.error_status_)>(
          reinterpret_cast<char*>(&_impl_.error_status_),
          reinterpret_cast<char*>(&other->_impl_.error_status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FetchClientInvoicesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_services_2fClientService_2eproto_getter, &descriptor_table_services_2fClientService_2eproto_once,
      file_level_metadata_services_2fClientService_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gRPCTest::Protos::Services::ClientByIdRequest*
Arena::CreateMaybeMessage< ::gRPCTest::Protos::Services::ClientByIdRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gRPCTest::Protos::Services::ClientByIdRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::gRPCTest::Protos::Services::CreateClientResponse*
Arena::CreateMaybeMessage< ::gRPCTest::Protos::Services::CreateClientResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gRPCTest::Protos::Services::CreateClientResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gRPCTest::Protos::Services::FetchClientByIdResponse*
Arena::CreateMaybeMessage< ::gRPCTest::Protos::Services::FetchClientByIdResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gRPCTest::Protos::Services::FetchClientByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gRPCTest::Protos::Services::FetchAllClientsResponse*
Arena::CreateMaybeMessage< ::gRPCTest::Protos::Services::FetchAllClientsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gRPCTest::Protos::Services::FetchAllClientsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::gRPCTest::Protos::Services::FetchClientInvoicesResponse*
Arena::CreateMaybeMessage< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
