// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/ProductService.proto
#ifndef GRPC_services_2fProductService_2eproto__INCLUDED
#define GRPC_services_2fProductService_2eproto__INCLUDED

#include "services/ProductService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace gRPCTest {
namespace Protos {
namespace Services {

// Product service.  
//
class ProductService final {
 public:
  static constexpr char const* service_full_name() {
    return "gRPCTest.Protos.Services.ProductService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::gRPCTest::Protos::Services::CreateProductResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::CreateProductResponse>> AsyncCreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::CreateProductResponse>>(AsyncCreateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::CreateProductResponse>> PrepareAsyncCreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::CreateProductResponse>>(PrepareAsyncCreateProductRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::gRPCTest::Protos::Services::FetchProductResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductResponse>> AsyncFetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductResponse>>(AsyncFetchProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductResponse>> PrepareAsyncFetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductResponse>>(PrepareAsyncFetchProductRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::gRPCTest::Protos::Services::FetchProductsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductsResponse>> AsyncFetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductsResponse>>(AsyncFetchProductsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductsResponse>> PrepareAsyncFetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductsResponse>>(PrepareAsyncFetchProductsRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::gRPCTest::Protos::Services::FetchProductsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductsResponse>> AsyncFetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductsResponse>>(AsyncFetchProductsByPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductsResponse>> PrepareAsyncFetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductsResponse>>(PrepareAsyncFetchProductsByPriceRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product* request, ::gRPCTest::Protos::Services::CreateProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product* request, ::gRPCTest::Protos::Services::CreateProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest* request, ::gRPCTest::Protos::Services::FetchProductResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest* request, ::gRPCTest::Protos::Services::FetchProductResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::CreateProductResponse>* AsyncCreateProductRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::CreateProductResponse>* PrepareAsyncCreateProductRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductResponse>* AsyncFetchProductRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductResponse>* PrepareAsyncFetchProductRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductsResponse>* AsyncFetchProductsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductsResponse>* PrepareAsyncFetchProductsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductsResponse>* AsyncFetchProductsByPriceRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchProductsResponse>* PrepareAsyncFetchProductsByPriceRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::gRPCTest::Protos::Services::CreateProductResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateProductResponse>> AsyncCreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateProductResponse>>(AsyncCreateProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateProductResponse>> PrepareAsyncCreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateProductResponse>>(PrepareAsyncCreateProductRaw(context, request, cq));
    }
    ::grpc::Status FetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::gRPCTest::Protos::Services::FetchProductResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductResponse>> AsyncFetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductResponse>>(AsyncFetchProductRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductResponse>> PrepareAsyncFetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductResponse>>(PrepareAsyncFetchProductRaw(context, request, cq));
    }
    ::grpc::Status FetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::gRPCTest::Protos::Services::FetchProductsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>> AsyncFetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>>(AsyncFetchProductsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>> PrepareAsyncFetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>>(PrepareAsyncFetchProductsRaw(context, request, cq));
    }
    ::grpc::Status FetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::gRPCTest::Protos::Services::FetchProductsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>> AsyncFetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>>(AsyncFetchProductsByPriceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>> PrepareAsyncFetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>>(PrepareAsyncFetchProductsByPriceRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product* request, ::gRPCTest::Protos::Services::CreateProductResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product* request, ::gRPCTest::Protos::Services::CreateProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest* request, ::gRPCTest::Protos::Services::FetchProductResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchProduct(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest* request, ::gRPCTest::Protos::Services::FetchProductResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchProducts(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchProductsByPrice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateProductResponse>* AsyncCreateProductRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateProductResponse>* PrepareAsyncCreateProductRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Product& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductResponse>* AsyncFetchProductRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductResponse>* PrepareAsyncFetchProductRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>* AsyncFetchProductsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>* PrepareAsyncFetchProductsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>* AsyncFetchProductsByPriceRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchProductsResponse>* PrepareAsyncFetchProductsByPriceRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchProduct_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchProducts_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchProductsByPrice_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateProduct(::grpc::ServerContext* context, const ::gRPCTest::Protos::Models::Product* request, ::gRPCTest::Protos::Services::CreateProductResponse* response);
    virtual ::grpc::Status FetchProduct(::grpc::ServerContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest* request, ::gRPCTest::Protos::Services::FetchProductResponse* response);
    virtual ::grpc::Status FetchProducts(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response);
    virtual ::grpc::Status FetchProductsByPrice(::grpc::ServerContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateProduct() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Product* /*request*/, ::gRPCTest::Protos::Services::CreateProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProduct(::grpc::ServerContext* context, ::gRPCTest::Protos::Models::Product* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::CreateProductResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchProduct() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FetchProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProduct(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchProduct(::grpc::ServerContext* context, ::gRPCTest::Protos::Services::ProductByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::FetchProductResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchProducts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchProducts() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FetchProducts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProducts(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchProducts(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::FetchProductsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchProductsByPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchProductsByPrice() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FetchProductsByPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProductsByPrice(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductPriceRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchProductsByPrice(::grpc::ServerContext* context, ::gRPCTest::Protos::Services::ProductPriceRequest* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::FetchProductsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateProduct<WithAsyncMethod_FetchProduct<WithAsyncMethod_FetchProducts<WithAsyncMethod_FetchProductsByPrice<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateProduct() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Models::Product, ::gRPCTest::Protos::Services::CreateProductResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gRPCTest::Protos::Models::Product* request, ::gRPCTest::Protos::Services::CreateProductResponse* response) { return this->CreateProduct(context, request, response); }));}
    void SetMessageAllocatorFor_CreateProduct(
        ::grpc::MessageAllocator< ::gRPCTest::Protos::Models::Product, ::gRPCTest::Protos::Services::CreateProductResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Models::Product, ::gRPCTest::Protos::Services::CreateProductResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Product* /*request*/, ::gRPCTest::Protos::Services::CreateProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::gRPCTest::Protos::Models::Product* /*request*/, ::gRPCTest::Protos::Services::CreateProductResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchProduct() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::ProductByIdRequest, ::gRPCTest::Protos::Services::FetchProductResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gRPCTest::Protos::Services::ProductByIdRequest* request, ::gRPCTest::Protos::Services::FetchProductResponse* response) { return this->FetchProduct(context, request, response); }));}
    void SetMessageAllocatorFor_FetchProduct(
        ::grpc::MessageAllocator< ::gRPCTest::Protos::Services::ProductByIdRequest, ::gRPCTest::Protos::Services::FetchProductResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::ProductByIdRequest, ::gRPCTest::Protos::Services::FetchProductResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProduct(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchProducts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchProducts() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchProductsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response) { return this->FetchProducts(context, request, response); }));}
    void SetMessageAllocatorFor_FetchProducts(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchProductsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchProductsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchProducts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProducts(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchProducts(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchProductsByPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchProductsByPrice() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::ProductPriceRequest, ::gRPCTest::Protos::Services::FetchProductsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gRPCTest::Protos::Services::ProductPriceRequest* request, ::gRPCTest::Protos::Services::FetchProductsResponse* response) { return this->FetchProductsByPrice(context, request, response); }));}
    void SetMessageAllocatorFor_FetchProductsByPrice(
        ::grpc::MessageAllocator< ::gRPCTest::Protos::Services::ProductPriceRequest, ::gRPCTest::Protos::Services::FetchProductsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::ProductPriceRequest, ::gRPCTest::Protos::Services::FetchProductsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchProductsByPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProductsByPrice(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductPriceRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchProductsByPrice(
      ::grpc::CallbackServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductPriceRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateProduct<WithCallbackMethod_FetchProduct<WithCallbackMethod_FetchProducts<WithCallbackMethod_FetchProductsByPrice<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateProduct() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Product* /*request*/, ::gRPCTest::Protos::Services::CreateProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchProduct() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FetchProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProduct(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchProducts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchProducts() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FetchProducts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProducts(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchProductsByPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchProductsByPrice() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FetchProductsByPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProductsByPrice(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductPriceRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateProduct() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Product* /*request*/, ::gRPCTest::Protos::Services::CreateProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchProduct() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FetchProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProduct(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchProduct(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchProducts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchProducts() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FetchProducts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProducts(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchProducts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchProductsByPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchProductsByPrice() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FetchProductsByPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProductsByPrice(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductPriceRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchProductsByPrice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateProduct() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Product* /*request*/, ::gRPCTest::Protos::Services::CreateProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchProduct() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchProduct(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProduct(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchProduct(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchProducts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchProducts() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchProducts(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchProducts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProducts(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchProducts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchProductsByPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchProductsByPrice() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchProductsByPrice(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchProductsByPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchProductsByPrice(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductPriceRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchProductsByPrice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateProduct() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gRPCTest::Protos::Models::Product, ::gRPCTest::Protos::Services::CreateProductResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gRPCTest::Protos::Models::Product, ::gRPCTest::Protos::Services::CreateProductResponse>* streamer) {
                       return this->StreamedCreateProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateProduct(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Product* /*request*/, ::gRPCTest::Protos::Services::CreateProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gRPCTest::Protos::Models::Product,::gRPCTest::Protos::Services::CreateProductResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchProduct : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchProduct() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gRPCTest::Protos::Services::ProductByIdRequest, ::gRPCTest::Protos::Services::FetchProductResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gRPCTest::Protos::Services::ProductByIdRequest, ::gRPCTest::Protos::Services::FetchProductResponse>* streamer) {
                       return this->StreamedFetchProduct(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchProduct() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchProduct(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchProduct(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gRPCTest::Protos::Services::ProductByIdRequest,::gRPCTest::Protos::Services::FetchProductResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchProducts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchProducts() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchProductsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchProductsResponse>* streamer) {
                       return this->StreamedFetchProducts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchProducts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchProducts(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchProducts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::gRPCTest::Protos::Services::FetchProductsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchProductsByPrice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchProductsByPrice() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gRPCTest::Protos::Services::ProductPriceRequest, ::gRPCTest::Protos::Services::FetchProductsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gRPCTest::Protos::Services::ProductPriceRequest, ::gRPCTest::Protos::Services::FetchProductsResponse>* streamer) {
                       return this->StreamedFetchProductsByPrice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchProductsByPrice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchProductsByPrice(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ProductPriceRequest* /*request*/, ::gRPCTest::Protos::Services::FetchProductsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchProductsByPrice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gRPCTest::Protos::Services::ProductPriceRequest,::gRPCTest::Protos::Services::FetchProductsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateProduct<WithStreamedUnaryMethod_FetchProduct<WithStreamedUnaryMethod_FetchProducts<WithStreamedUnaryMethod_FetchProductsByPrice<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateProduct<WithStreamedUnaryMethod_FetchProduct<WithStreamedUnaryMethod_FetchProducts<WithStreamedUnaryMethod_FetchProductsByPrice<Service > > > > StreamedService;
};

}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest


#endif  // GRPC_services_2fProductService_2eproto__INCLUDED
