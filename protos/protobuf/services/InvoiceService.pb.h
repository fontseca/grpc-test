// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/InvoiceService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fInvoiceService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fInvoiceService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/empty.pb.h>
#include "models/Invoice.pb.h"
#include "models/InvoiceDetails.pb.h"
#include "common/ServiceStatus.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fInvoiceService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fInvoiceService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fInvoiceService_2eproto;
namespace gRPCTest {
namespace Protos {
namespace Services {
class FetchInvoiceByDateRequest;
struct FetchInvoiceByDateRequestDefaultTypeInternal;
extern FetchInvoiceByDateRequestDefaultTypeInternal _FetchInvoiceByDateRequest_default_instance_;
class FetchInvoiceByDateResponse;
struct FetchInvoiceByDateResponseDefaultTypeInternal;
extern FetchInvoiceByDateResponseDefaultTypeInternal _FetchInvoiceByDateResponse_default_instance_;
class FetchInvoiceByIdResponse;
struct FetchInvoiceByIdResponseDefaultTypeInternal;
extern FetchInvoiceByIdResponseDefaultTypeInternal _FetchInvoiceByIdResponse_default_instance_;
class FetchInvoiceDetailsResponse;
struct FetchInvoiceDetailsResponseDefaultTypeInternal;
extern FetchInvoiceDetailsResponseDefaultTypeInternal _FetchInvoiceDetailsResponse_default_instance_;
class FetchInvoicesResponse;
struct FetchInvoicesResponseDefaultTypeInternal;
extern FetchInvoicesResponseDefaultTypeInternal _FetchInvoicesResponse_default_instance_;
class InvoiceByIdRequest;
struct InvoiceByIdRequestDefaultTypeInternal;
extern InvoiceByIdRequestDefaultTypeInternal _InvoiceByIdRequest_default_instance_;
class RegisterInvoiceResponse;
struct RegisterInvoiceResponseDefaultTypeInternal;
extern RegisterInvoiceResponseDefaultTypeInternal _RegisterInvoiceResponse_default_instance_;
}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest
PROTOBUF_NAMESPACE_OPEN
template<> ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::FetchInvoiceByDateRequest>(Arena*);
template<> ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::FetchInvoicesResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::FetchInvoicesResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::InvoiceByIdRequest* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::InvoiceByIdRequest>(Arena*);
template<> ::gRPCTest::Protos::Services::RegisterInvoiceResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::RegisterInvoiceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gRPCTest {
namespace Protos {
namespace Services {

// ===================================================================

class InvoiceByIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.InvoiceByIdRequest) */ {
 public:
  inline InvoiceByIdRequest() : InvoiceByIdRequest(nullptr) {}
  ~InvoiceByIdRequest() override;
  explicit PROTOBUF_CONSTEXPR InvoiceByIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvoiceByIdRequest(const InvoiceByIdRequest& from);
  InvoiceByIdRequest(InvoiceByIdRequest&& from) noexcept
    : InvoiceByIdRequest() {
    *this = ::std::move(from);
  }

  inline InvoiceByIdRequest& operator=(const InvoiceByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvoiceByIdRequest& operator=(InvoiceByIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InvoiceByIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvoiceByIdRequest* internal_default_instance() {
    return reinterpret_cast<const InvoiceByIdRequest*>(
               &_InvoiceByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InvoiceByIdRequest& a, InvoiceByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InvoiceByIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvoiceByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvoiceByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvoiceByIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InvoiceByIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InvoiceByIdRequest& from) {
    InvoiceByIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvoiceByIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.InvoiceByIdRequest";
  }
  protected:
  explicit InvoiceByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvoiceIdFieldNumber = 1,
  };
  // int64 invoice_id = 1;
  void clear_invoice_id();
  int64_t invoice_id() const;
  void set_invoice_id(int64_t value);
  private:
  int64_t _internal_invoice_id() const;
  void _internal_set_invoice_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.InvoiceByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t invoice_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fInvoiceService_2eproto;
};
// -------------------------------------------------------------------

class FetchInvoiceByDateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.FetchInvoiceByDateRequest) */ {
 public:
  inline FetchInvoiceByDateRequest() : FetchInvoiceByDateRequest(nullptr) {}
  ~FetchInvoiceByDateRequest() override;
  explicit PROTOBUF_CONSTEXPR FetchInvoiceByDateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchInvoiceByDateRequest(const FetchInvoiceByDateRequest& from);
  FetchInvoiceByDateRequest(FetchInvoiceByDateRequest&& from) noexcept
    : FetchInvoiceByDateRequest() {
    *this = ::std::move(from);
  }

  inline FetchInvoiceByDateRequest& operator=(const FetchInvoiceByDateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchInvoiceByDateRequest& operator=(FetchInvoiceByDateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchInvoiceByDateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchInvoiceByDateRequest* internal_default_instance() {
    return reinterpret_cast<const FetchInvoiceByDateRequest*>(
               &_FetchInvoiceByDateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FetchInvoiceByDateRequest& a, FetchInvoiceByDateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchInvoiceByDateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchInvoiceByDateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchInvoiceByDateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchInvoiceByDateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchInvoiceByDateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchInvoiceByDateRequest& from) {
    FetchInvoiceByDateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchInvoiceByDateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.FetchInvoiceByDateRequest";
  }
  protected:
  explicit FetchInvoiceByDateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateFieldNumber = 1,
  };
  // .google.protobuf.Timestamp date = 1;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_date();
  void set_allocated_date(::PROTOBUF_NAMESPACE_ID::Timestamp* date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_date();
  public:
  void unsafe_arena_set_allocated_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_date();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.FetchInvoiceByDateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fInvoiceService_2eproto;
};
// -------------------------------------------------------------------

class RegisterInvoiceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.RegisterInvoiceResponse) */ {
 public:
  inline RegisterInvoiceResponse() : RegisterInvoiceResponse(nullptr) {}
  ~RegisterInvoiceResponse() override;
  explicit PROTOBUF_CONSTEXPR RegisterInvoiceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterInvoiceResponse(const RegisterInvoiceResponse& from);
  RegisterInvoiceResponse(RegisterInvoiceResponse&& from) noexcept
    : RegisterInvoiceResponse() {
    *this = ::std::move(from);
  }

  inline RegisterInvoiceResponse& operator=(const RegisterInvoiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterInvoiceResponse& operator=(RegisterInvoiceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterInvoiceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterInvoiceResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterInvoiceResponse*>(
               &_RegisterInvoiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterInvoiceResponse& a, RegisterInvoiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterInvoiceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterInvoiceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterInvoiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterInvoiceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterInvoiceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterInvoiceResponse& from) {
    RegisterInvoiceResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterInvoiceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.RegisterInvoiceResponse";
  }
  protected:
  explicit RegisterInvoiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvoiceFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // .gRPCTest.Protos.Models.Invoice invoice = 1;
  bool has_invoice() const;
  private:
  bool _internal_has_invoice() const;
  public:
  void clear_invoice();
  const ::gRPCTest::Protos::Models::Invoice& invoice() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Models::Invoice* release_invoice();
  ::gRPCTest::Protos::Models::Invoice* mutable_invoice();
  void set_allocated_invoice(::gRPCTest::Protos::Models::Invoice* invoice);
  private:
  const ::gRPCTest::Protos::Models::Invoice& _internal_invoice() const;
  ::gRPCTest::Protos::Models::Invoice* _internal_mutable_invoice();
  public:
  void unsafe_arena_set_allocated_invoice(
      ::gRPCTest::Protos::Models::Invoice* invoice);
  ::gRPCTest::Protos::Models::Invoice* unsafe_arena_release_invoice();

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.RegisterInvoiceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gRPCTest::Protos::Models::Invoice* invoice_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fInvoiceService_2eproto;
};
// -------------------------------------------------------------------

class FetchInvoiceByIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.FetchInvoiceByIdResponse) */ {
 public:
  inline FetchInvoiceByIdResponse() : FetchInvoiceByIdResponse(nullptr) {}
  ~FetchInvoiceByIdResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchInvoiceByIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchInvoiceByIdResponse(const FetchInvoiceByIdResponse& from);
  FetchInvoiceByIdResponse(FetchInvoiceByIdResponse&& from) noexcept
    : FetchInvoiceByIdResponse() {
    *this = ::std::move(from);
  }

  inline FetchInvoiceByIdResponse& operator=(const FetchInvoiceByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchInvoiceByIdResponse& operator=(FetchInvoiceByIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchInvoiceByIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchInvoiceByIdResponse* internal_default_instance() {
    return reinterpret_cast<const FetchInvoiceByIdResponse*>(
               &_FetchInvoiceByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FetchInvoiceByIdResponse& a, FetchInvoiceByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchInvoiceByIdResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchInvoiceByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchInvoiceByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchInvoiceByIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchInvoiceByIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchInvoiceByIdResponse& from) {
    FetchInvoiceByIdResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchInvoiceByIdResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.FetchInvoiceByIdResponse";
  }
  protected:
  explicit FetchInvoiceByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvoiceFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // .gRPCTest.Protos.Models.Invoice invoice = 1;
  bool has_invoice() const;
  private:
  bool _internal_has_invoice() const;
  public:
  void clear_invoice();
  const ::gRPCTest::Protos::Models::Invoice& invoice() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Models::Invoice* release_invoice();
  ::gRPCTest::Protos::Models::Invoice* mutable_invoice();
  void set_allocated_invoice(::gRPCTest::Protos::Models::Invoice* invoice);
  private:
  const ::gRPCTest::Protos::Models::Invoice& _internal_invoice() const;
  ::gRPCTest::Protos::Models::Invoice* _internal_mutable_invoice();
  public:
  void unsafe_arena_set_allocated_invoice(
      ::gRPCTest::Protos::Models::Invoice* invoice);
  ::gRPCTest::Protos::Models::Invoice* unsafe_arena_release_invoice();

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.FetchInvoiceByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gRPCTest::Protos::Models::Invoice* invoice_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fInvoiceService_2eproto;
};
// -------------------------------------------------------------------

class FetchInvoiceByDateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.FetchInvoiceByDateResponse) */ {
 public:
  inline FetchInvoiceByDateResponse() : FetchInvoiceByDateResponse(nullptr) {}
  ~FetchInvoiceByDateResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchInvoiceByDateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchInvoiceByDateResponse(const FetchInvoiceByDateResponse& from);
  FetchInvoiceByDateResponse(FetchInvoiceByDateResponse&& from) noexcept
    : FetchInvoiceByDateResponse() {
    *this = ::std::move(from);
  }

  inline FetchInvoiceByDateResponse& operator=(const FetchInvoiceByDateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchInvoiceByDateResponse& operator=(FetchInvoiceByDateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchInvoiceByDateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchInvoiceByDateResponse* internal_default_instance() {
    return reinterpret_cast<const FetchInvoiceByDateResponse*>(
               &_FetchInvoiceByDateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FetchInvoiceByDateResponse& a, FetchInvoiceByDateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchInvoiceByDateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchInvoiceByDateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchInvoiceByDateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchInvoiceByDateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchInvoiceByDateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchInvoiceByDateResponse& from) {
    FetchInvoiceByDateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchInvoiceByDateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.FetchInvoiceByDateResponse";
  }
  protected:
  explicit FetchInvoiceByDateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvoiceFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // .gRPCTest.Protos.Models.Invoice invoice = 1;
  bool has_invoice() const;
  private:
  bool _internal_has_invoice() const;
  public:
  void clear_invoice();
  const ::gRPCTest::Protos::Models::Invoice& invoice() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Models::Invoice* release_invoice();
  ::gRPCTest::Protos::Models::Invoice* mutable_invoice();
  void set_allocated_invoice(::gRPCTest::Protos::Models::Invoice* invoice);
  private:
  const ::gRPCTest::Protos::Models::Invoice& _internal_invoice() const;
  ::gRPCTest::Protos::Models::Invoice* _internal_mutable_invoice();
  public:
  void unsafe_arena_set_allocated_invoice(
      ::gRPCTest::Protos::Models::Invoice* invoice);
  ::gRPCTest::Protos::Models::Invoice* unsafe_arena_release_invoice();

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.FetchInvoiceByDateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gRPCTest::Protos::Models::Invoice* invoice_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fInvoiceService_2eproto;
};
// -------------------------------------------------------------------

class FetchInvoiceDetailsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.FetchInvoiceDetailsResponse) */ {
 public:
  inline FetchInvoiceDetailsResponse() : FetchInvoiceDetailsResponse(nullptr) {}
  ~FetchInvoiceDetailsResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchInvoiceDetailsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchInvoiceDetailsResponse(const FetchInvoiceDetailsResponse& from);
  FetchInvoiceDetailsResponse(FetchInvoiceDetailsResponse&& from) noexcept
    : FetchInvoiceDetailsResponse() {
    *this = ::std::move(from);
  }

  inline FetchInvoiceDetailsResponse& operator=(const FetchInvoiceDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchInvoiceDetailsResponse& operator=(FetchInvoiceDetailsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchInvoiceDetailsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchInvoiceDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const FetchInvoiceDetailsResponse*>(
               &_FetchInvoiceDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FetchInvoiceDetailsResponse& a, FetchInvoiceDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchInvoiceDetailsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchInvoiceDetailsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchInvoiceDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchInvoiceDetailsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchInvoiceDetailsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchInvoiceDetailsResponse& from) {
    FetchInvoiceDetailsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchInvoiceDetailsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.FetchInvoiceDetailsResponse";
  }
  protected:
  explicit FetchInvoiceDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvoiceDetailsFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // .gRPCTest.Protos.Models.InvoiceDetails invoice_details = 1;
  bool has_invoice_details() const;
  private:
  bool _internal_has_invoice_details() const;
  public:
  void clear_invoice_details();
  const ::gRPCTest::Protos::Models::InvoiceDetails& invoice_details() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Models::InvoiceDetails* release_invoice_details();
  ::gRPCTest::Protos::Models::InvoiceDetails* mutable_invoice_details();
  void set_allocated_invoice_details(::gRPCTest::Protos::Models::InvoiceDetails* invoice_details);
  private:
  const ::gRPCTest::Protos::Models::InvoiceDetails& _internal_invoice_details() const;
  ::gRPCTest::Protos::Models::InvoiceDetails* _internal_mutable_invoice_details();
  public:
  void unsafe_arena_set_allocated_invoice_details(
      ::gRPCTest::Protos::Models::InvoiceDetails* invoice_details);
  ::gRPCTest::Protos::Models::InvoiceDetails* unsafe_arena_release_invoice_details();

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.FetchInvoiceDetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gRPCTest::Protos::Models::InvoiceDetails* invoice_details_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fInvoiceService_2eproto;
};
// -------------------------------------------------------------------

class FetchInvoicesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.FetchInvoicesResponse) */ {
 public:
  inline FetchInvoicesResponse() : FetchInvoicesResponse(nullptr) {}
  ~FetchInvoicesResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchInvoicesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchInvoicesResponse(const FetchInvoicesResponse& from);
  FetchInvoicesResponse(FetchInvoicesResponse&& from) noexcept
    : FetchInvoicesResponse() {
    *this = ::std::move(from);
  }

  inline FetchInvoicesResponse& operator=(const FetchInvoicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchInvoicesResponse& operator=(FetchInvoicesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchInvoicesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchInvoicesResponse* internal_default_instance() {
    return reinterpret_cast<const FetchInvoicesResponse*>(
               &_FetchInvoicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FetchInvoicesResponse& a, FetchInvoicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchInvoicesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchInvoicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchInvoicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchInvoicesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchInvoicesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchInvoicesResponse& from) {
    FetchInvoicesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchInvoicesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.FetchInvoicesResponse";
  }
  protected:
  explicit FetchInvoicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvoicesFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // repeated .gRPCTest.Protos.Models.Invoice invoices = 1;
  int invoices_size() const;
  private:
  int _internal_invoices_size() const;
  public:
  void clear_invoices();
  ::gRPCTest::Protos::Models::Invoice* mutable_invoices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice >*
      mutable_invoices();
  private:
  const ::gRPCTest::Protos::Models::Invoice& _internal_invoices(int index) const;
  ::gRPCTest::Protos::Models::Invoice* _internal_add_invoices();
  public:
  const ::gRPCTest::Protos::Models::Invoice& invoices(int index) const;
  ::gRPCTest::Protos::Models::Invoice* add_invoices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice >&
      invoices() const;

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.FetchInvoicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice > invoices_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fInvoiceService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InvoiceByIdRequest

// int64 invoice_id = 1;
inline void InvoiceByIdRequest::clear_invoice_id() {
  _impl_.invoice_id_ = int64_t{0};
}
inline int64_t InvoiceByIdRequest::_internal_invoice_id() const {
  return _impl_.invoice_id_;
}
inline int64_t InvoiceByIdRequest::invoice_id() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.InvoiceByIdRequest.invoice_id)
  return _internal_invoice_id();
}
inline void InvoiceByIdRequest::_internal_set_invoice_id(int64_t value) {
  
  _impl_.invoice_id_ = value;
}
inline void InvoiceByIdRequest::set_invoice_id(int64_t value) {
  _internal_set_invoice_id(value);
  // @@protoc_insertion_point(field_set:gRPCTest.Protos.Services.InvoiceByIdRequest.invoice_id)
}

// -------------------------------------------------------------------

// FetchInvoiceByDateRequest

// .google.protobuf.Timestamp date = 1;
inline bool FetchInvoiceByDateRequest::_internal_has_date() const {
  return this != internal_default_instance() && _impl_.date_ != nullptr;
}
inline bool FetchInvoiceByDateRequest::has_date() const {
  return _internal_has_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& FetchInvoiceByDateRequest::_internal_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& FetchInvoiceByDateRequest::date() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchInvoiceByDateRequest.date)
  return _internal_date();
}
inline void FetchInvoiceByDateRequest::unsafe_arena_set_allocated_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_);
  }
  _impl_.date_ = date;
  if (date) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchInvoiceByDateRequest.date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FetchInvoiceByDateRequest::release_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_;
  _impl_.date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FetchInvoiceByDateRequest::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchInvoiceByDateRequest.date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.date_;
  _impl_.date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FetchInvoiceByDateRequest::_internal_mutable_date() {
  
  if (_impl_.date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.date_ = p;
  }
  return _impl_.date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* FetchInvoiceByDateRequest::mutable_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_date();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchInvoiceByDateRequest.date)
  return _msg;
}
inline void FetchInvoiceByDateRequest::set_allocated_date(::PROTOBUF_NAMESPACE_ID::Timestamp* date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.date_);
  }
  if (date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(date));
    if (message_arena != submessage_arena) {
      date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, date, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.date_ = date;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchInvoiceByDateRequest.date)
}

// -------------------------------------------------------------------

// RegisterInvoiceResponse

// .gRPCTest.Protos.Models.Invoice invoice = 1;
inline bool RegisterInvoiceResponse::_internal_has_invoice() const {
  return this != internal_default_instance() && _impl_.invoice_ != nullptr;
}
inline bool RegisterInvoiceResponse::has_invoice() const {
  return _internal_has_invoice();
}
inline const ::gRPCTest::Protos::Models::Invoice& RegisterInvoiceResponse::_internal_invoice() const {
  const ::gRPCTest::Protos::Models::Invoice* p = _impl_.invoice_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Models::Invoice&>(
      ::gRPCTest::Protos::Models::_Invoice_default_instance_);
}
inline const ::gRPCTest::Protos::Models::Invoice& RegisterInvoiceResponse::invoice() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.RegisterInvoiceResponse.invoice)
  return _internal_invoice();
}
inline void RegisterInvoiceResponse::unsafe_arena_set_allocated_invoice(
    ::gRPCTest::Protos::Models::Invoice* invoice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invoice_);
  }
  _impl_.invoice_ = invoice;
  if (invoice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.RegisterInvoiceResponse.invoice)
}
inline ::gRPCTest::Protos::Models::Invoice* RegisterInvoiceResponse::release_invoice() {
  
  ::gRPCTest::Protos::Models::Invoice* temp = _impl_.invoice_;
  _impl_.invoice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Models::Invoice* RegisterInvoiceResponse::unsafe_arena_release_invoice() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.RegisterInvoiceResponse.invoice)
  
  ::gRPCTest::Protos::Models::Invoice* temp = _impl_.invoice_;
  _impl_.invoice_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Models::Invoice* RegisterInvoiceResponse::_internal_mutable_invoice() {
  
  if (_impl_.invoice_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Models::Invoice>(GetArenaForAllocation());
    _impl_.invoice_ = p;
  }
  return _impl_.invoice_;
}
inline ::gRPCTest::Protos::Models::Invoice* RegisterInvoiceResponse::mutable_invoice() {
  ::gRPCTest::Protos::Models::Invoice* _msg = _internal_mutable_invoice();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.RegisterInvoiceResponse.invoice)
  return _msg;
}
inline void RegisterInvoiceResponse::set_allocated_invoice(::gRPCTest::Protos::Models::Invoice* invoice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invoice_);
  }
  if (invoice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invoice));
    if (message_arena != submessage_arena) {
      invoice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.invoice_ = invoice;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.RegisterInvoiceResponse.invoice)
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool RegisterInvoiceResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool RegisterInvoiceResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& RegisterInvoiceResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& RegisterInvoiceResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.RegisterInvoiceResponse.error_status)
  return _internal_error_status();
}
inline void RegisterInvoiceResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.RegisterInvoiceResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* RegisterInvoiceResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* RegisterInvoiceResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.RegisterInvoiceResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* RegisterInvoiceResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* RegisterInvoiceResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.RegisterInvoiceResponse.error_status)
  return _msg;
}
inline void RegisterInvoiceResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.RegisterInvoiceResponse.error_status)
}

// -------------------------------------------------------------------

// FetchInvoiceByIdResponse

// .gRPCTest.Protos.Models.Invoice invoice = 1;
inline bool FetchInvoiceByIdResponse::_internal_has_invoice() const {
  return this != internal_default_instance() && _impl_.invoice_ != nullptr;
}
inline bool FetchInvoiceByIdResponse::has_invoice() const {
  return _internal_has_invoice();
}
inline const ::gRPCTest::Protos::Models::Invoice& FetchInvoiceByIdResponse::_internal_invoice() const {
  const ::gRPCTest::Protos::Models::Invoice* p = _impl_.invoice_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Models::Invoice&>(
      ::gRPCTest::Protos::Models::_Invoice_default_instance_);
}
inline const ::gRPCTest::Protos::Models::Invoice& FetchInvoiceByIdResponse::invoice() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchInvoiceByIdResponse.invoice)
  return _internal_invoice();
}
inline void FetchInvoiceByIdResponse::unsafe_arena_set_allocated_invoice(
    ::gRPCTest::Protos::Models::Invoice* invoice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invoice_);
  }
  _impl_.invoice_ = invoice;
  if (invoice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchInvoiceByIdResponse.invoice)
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoiceByIdResponse::release_invoice() {
  
  ::gRPCTest::Protos::Models::Invoice* temp = _impl_.invoice_;
  _impl_.invoice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoiceByIdResponse::unsafe_arena_release_invoice() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchInvoiceByIdResponse.invoice)
  
  ::gRPCTest::Protos::Models::Invoice* temp = _impl_.invoice_;
  _impl_.invoice_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoiceByIdResponse::_internal_mutable_invoice() {
  
  if (_impl_.invoice_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Models::Invoice>(GetArenaForAllocation());
    _impl_.invoice_ = p;
  }
  return _impl_.invoice_;
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoiceByIdResponse::mutable_invoice() {
  ::gRPCTest::Protos::Models::Invoice* _msg = _internal_mutable_invoice();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchInvoiceByIdResponse.invoice)
  return _msg;
}
inline void FetchInvoiceByIdResponse::set_allocated_invoice(::gRPCTest::Protos::Models::Invoice* invoice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invoice_);
  }
  if (invoice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invoice));
    if (message_arena != submessage_arena) {
      invoice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.invoice_ = invoice;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchInvoiceByIdResponse.invoice)
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool FetchInvoiceByIdResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool FetchInvoiceByIdResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchInvoiceByIdResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchInvoiceByIdResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchInvoiceByIdResponse.error_status)
  return _internal_error_status();
}
inline void FetchInvoiceByIdResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchInvoiceByIdResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoiceByIdResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoiceByIdResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchInvoiceByIdResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoiceByIdResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoiceByIdResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchInvoiceByIdResponse.error_status)
  return _msg;
}
inline void FetchInvoiceByIdResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchInvoiceByIdResponse.error_status)
}

// -------------------------------------------------------------------

// FetchInvoiceByDateResponse

// .gRPCTest.Protos.Models.Invoice invoice = 1;
inline bool FetchInvoiceByDateResponse::_internal_has_invoice() const {
  return this != internal_default_instance() && _impl_.invoice_ != nullptr;
}
inline bool FetchInvoiceByDateResponse::has_invoice() const {
  return _internal_has_invoice();
}
inline const ::gRPCTest::Protos::Models::Invoice& FetchInvoiceByDateResponse::_internal_invoice() const {
  const ::gRPCTest::Protos::Models::Invoice* p = _impl_.invoice_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Models::Invoice&>(
      ::gRPCTest::Protos::Models::_Invoice_default_instance_);
}
inline const ::gRPCTest::Protos::Models::Invoice& FetchInvoiceByDateResponse::invoice() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchInvoiceByDateResponse.invoice)
  return _internal_invoice();
}
inline void FetchInvoiceByDateResponse::unsafe_arena_set_allocated_invoice(
    ::gRPCTest::Protos::Models::Invoice* invoice) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invoice_);
  }
  _impl_.invoice_ = invoice;
  if (invoice) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchInvoiceByDateResponse.invoice)
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoiceByDateResponse::release_invoice() {
  
  ::gRPCTest::Protos::Models::Invoice* temp = _impl_.invoice_;
  _impl_.invoice_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoiceByDateResponse::unsafe_arena_release_invoice() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchInvoiceByDateResponse.invoice)
  
  ::gRPCTest::Protos::Models::Invoice* temp = _impl_.invoice_;
  _impl_.invoice_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoiceByDateResponse::_internal_mutable_invoice() {
  
  if (_impl_.invoice_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Models::Invoice>(GetArenaForAllocation());
    _impl_.invoice_ = p;
  }
  return _impl_.invoice_;
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoiceByDateResponse::mutable_invoice() {
  ::gRPCTest::Protos::Models::Invoice* _msg = _internal_mutable_invoice();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchInvoiceByDateResponse.invoice)
  return _msg;
}
inline void FetchInvoiceByDateResponse::set_allocated_invoice(::gRPCTest::Protos::Models::Invoice* invoice) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invoice_);
  }
  if (invoice) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invoice));
    if (message_arena != submessage_arena) {
      invoice = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoice, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.invoice_ = invoice;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchInvoiceByDateResponse.invoice)
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool FetchInvoiceByDateResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool FetchInvoiceByDateResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchInvoiceByDateResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchInvoiceByDateResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchInvoiceByDateResponse.error_status)
  return _internal_error_status();
}
inline void FetchInvoiceByDateResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchInvoiceByDateResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoiceByDateResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoiceByDateResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchInvoiceByDateResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoiceByDateResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoiceByDateResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchInvoiceByDateResponse.error_status)
  return _msg;
}
inline void FetchInvoiceByDateResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchInvoiceByDateResponse.error_status)
}

// -------------------------------------------------------------------

// FetchInvoiceDetailsResponse

// .gRPCTest.Protos.Models.InvoiceDetails invoice_details = 1;
inline bool FetchInvoiceDetailsResponse::_internal_has_invoice_details() const {
  return this != internal_default_instance() && _impl_.invoice_details_ != nullptr;
}
inline bool FetchInvoiceDetailsResponse::has_invoice_details() const {
  return _internal_has_invoice_details();
}
inline const ::gRPCTest::Protos::Models::InvoiceDetails& FetchInvoiceDetailsResponse::_internal_invoice_details() const {
  const ::gRPCTest::Protos::Models::InvoiceDetails* p = _impl_.invoice_details_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Models::InvoiceDetails&>(
      ::gRPCTest::Protos::Models::_InvoiceDetails_default_instance_);
}
inline const ::gRPCTest::Protos::Models::InvoiceDetails& FetchInvoiceDetailsResponse::invoice_details() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchInvoiceDetailsResponse.invoice_details)
  return _internal_invoice_details();
}
inline void FetchInvoiceDetailsResponse::unsafe_arena_set_allocated_invoice_details(
    ::gRPCTest::Protos::Models::InvoiceDetails* invoice_details) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invoice_details_);
  }
  _impl_.invoice_details_ = invoice_details;
  if (invoice_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchInvoiceDetailsResponse.invoice_details)
}
inline ::gRPCTest::Protos::Models::InvoiceDetails* FetchInvoiceDetailsResponse::release_invoice_details() {
  
  ::gRPCTest::Protos::Models::InvoiceDetails* temp = _impl_.invoice_details_;
  _impl_.invoice_details_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Models::InvoiceDetails* FetchInvoiceDetailsResponse::unsafe_arena_release_invoice_details() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchInvoiceDetailsResponse.invoice_details)
  
  ::gRPCTest::Protos::Models::InvoiceDetails* temp = _impl_.invoice_details_;
  _impl_.invoice_details_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Models::InvoiceDetails* FetchInvoiceDetailsResponse::_internal_mutable_invoice_details() {
  
  if (_impl_.invoice_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Models::InvoiceDetails>(GetArenaForAllocation());
    _impl_.invoice_details_ = p;
  }
  return _impl_.invoice_details_;
}
inline ::gRPCTest::Protos::Models::InvoiceDetails* FetchInvoiceDetailsResponse::mutable_invoice_details() {
  ::gRPCTest::Protos::Models::InvoiceDetails* _msg = _internal_mutable_invoice_details();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchInvoiceDetailsResponse.invoice_details)
  return _msg;
}
inline void FetchInvoiceDetailsResponse::set_allocated_invoice_details(::gRPCTest::Protos::Models::InvoiceDetails* invoice_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.invoice_details_);
  }
  if (invoice_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(invoice_details));
    if (message_arena != submessage_arena) {
      invoice_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoice_details, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.invoice_details_ = invoice_details;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchInvoiceDetailsResponse.invoice_details)
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool FetchInvoiceDetailsResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool FetchInvoiceDetailsResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchInvoiceDetailsResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchInvoiceDetailsResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchInvoiceDetailsResponse.error_status)
  return _internal_error_status();
}
inline void FetchInvoiceDetailsResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchInvoiceDetailsResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoiceDetailsResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoiceDetailsResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchInvoiceDetailsResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoiceDetailsResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoiceDetailsResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchInvoiceDetailsResponse.error_status)
  return _msg;
}
inline void FetchInvoiceDetailsResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchInvoiceDetailsResponse.error_status)
}

// -------------------------------------------------------------------

// FetchInvoicesResponse

// repeated .gRPCTest.Protos.Models.Invoice invoices = 1;
inline int FetchInvoicesResponse::_internal_invoices_size() const {
  return _impl_.invoices_.size();
}
inline int FetchInvoicesResponse::invoices_size() const {
  return _internal_invoices_size();
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoicesResponse::mutable_invoices(int index) {
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchInvoicesResponse.invoices)
  return _impl_.invoices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice >*
FetchInvoicesResponse::mutable_invoices() {
  // @@protoc_insertion_point(field_mutable_list:gRPCTest.Protos.Services.FetchInvoicesResponse.invoices)
  return &_impl_.invoices_;
}
inline const ::gRPCTest::Protos::Models::Invoice& FetchInvoicesResponse::_internal_invoices(int index) const {
  return _impl_.invoices_.Get(index);
}
inline const ::gRPCTest::Protos::Models::Invoice& FetchInvoicesResponse::invoices(int index) const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchInvoicesResponse.invoices)
  return _internal_invoices(index);
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoicesResponse::_internal_add_invoices() {
  return _impl_.invoices_.Add();
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoicesResponse::add_invoices() {
  ::gRPCTest::Protos::Models::Invoice* _add = _internal_add_invoices();
  // @@protoc_insertion_point(field_add:gRPCTest.Protos.Services.FetchInvoicesResponse.invoices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice >&
FetchInvoicesResponse::invoices() const {
  // @@protoc_insertion_point(field_list:gRPCTest.Protos.Services.FetchInvoicesResponse.invoices)
  return _impl_.invoices_;
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool FetchInvoicesResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool FetchInvoicesResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchInvoicesResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchInvoicesResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchInvoicesResponse.error_status)
  return _internal_error_status();
}
inline void FetchInvoicesResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchInvoicesResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoicesResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoicesResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchInvoicesResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoicesResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoicesResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchInvoicesResponse.error_status)
  return _msg;
}
inline void FetchInvoicesResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchInvoicesResponse.error_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fInvoiceService_2eproto
