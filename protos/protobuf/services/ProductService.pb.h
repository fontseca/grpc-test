// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/ProductService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fProductService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fProductService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "models/Product.pb.h"
#include "common/ServiceStatus.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fProductService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fProductService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fProductService_2eproto;
namespace gRPCTest {
namespace Protos {
namespace Services {
class CreateProductResponse;
struct CreateProductResponseDefaultTypeInternal;
extern CreateProductResponseDefaultTypeInternal _CreateProductResponse_default_instance_;
class FetchProductResponse;
struct FetchProductResponseDefaultTypeInternal;
extern FetchProductResponseDefaultTypeInternal _FetchProductResponse_default_instance_;
class FetchProductsResponse;
struct FetchProductsResponseDefaultTypeInternal;
extern FetchProductsResponseDefaultTypeInternal _FetchProductsResponse_default_instance_;
class ProductByIdRequest;
struct ProductByIdRequestDefaultTypeInternal;
extern ProductByIdRequestDefaultTypeInternal _ProductByIdRequest_default_instance_;
class ProductPriceRequest;
struct ProductPriceRequestDefaultTypeInternal;
extern ProductPriceRequestDefaultTypeInternal _ProductPriceRequest_default_instance_;
}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest
PROTOBUF_NAMESPACE_OPEN
template<> ::gRPCTest::Protos::Services::CreateProductResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::CreateProductResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::FetchProductResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::FetchProductResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::FetchProductsResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::FetchProductsResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::ProductByIdRequest* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::ProductByIdRequest>(Arena*);
template<> ::gRPCTest::Protos::Services::ProductPriceRequest* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::ProductPriceRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gRPCTest {
namespace Protos {
namespace Services {

// ===================================================================

class ProductByIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.ProductByIdRequest) */ {
 public:
  inline ProductByIdRequest() : ProductByIdRequest(nullptr) {}
  ~ProductByIdRequest() override;
  explicit PROTOBUF_CONSTEXPR ProductByIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductByIdRequest(const ProductByIdRequest& from);
  ProductByIdRequest(ProductByIdRequest&& from) noexcept
    : ProductByIdRequest() {
    *this = ::std::move(from);
  }

  inline ProductByIdRequest& operator=(const ProductByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductByIdRequest& operator=(ProductByIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductByIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductByIdRequest* internal_default_instance() {
    return reinterpret_cast<const ProductByIdRequest*>(
               &_ProductByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProductByIdRequest& a, ProductByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductByIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProductByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProductByIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProductByIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProductByIdRequest& from) {
    ProductByIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductByIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.ProductByIdRequest";
  }
  protected:
  explicit ProductByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
  };
  // int64 product_id = 1;
  void clear_product_id();
  int64_t product_id() const;
  void set_product_id(int64_t value);
  private:
  int64_t _internal_product_id() const;
  void _internal_set_product_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.ProductByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t product_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fProductService_2eproto;
};
// -------------------------------------------------------------------

class ProductPriceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.ProductPriceRequest) */ {
 public:
  inline ProductPriceRequest() : ProductPriceRequest(nullptr) {}
  ~ProductPriceRequest() override;
  explicit PROTOBUF_CONSTEXPR ProductPriceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductPriceRequest(const ProductPriceRequest& from);
  ProductPriceRequest(ProductPriceRequest&& from) noexcept
    : ProductPriceRequest() {
    *this = ::std::move(from);
  }

  inline ProductPriceRequest& operator=(const ProductPriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductPriceRequest& operator=(ProductPriceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductPriceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductPriceRequest* internal_default_instance() {
    return reinterpret_cast<const ProductPriceRequest*>(
               &_ProductPriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProductPriceRequest& a, ProductPriceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductPriceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductPriceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProductPriceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProductPriceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProductPriceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ProductPriceRequest& from) {
    ProductPriceRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductPriceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.ProductPriceRequest";
  }
  protected:
  explicit ProductPriceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductPriceFieldNumber = 1,
  };
  // double product_price = 1;
  void clear_product_price();
  double product_price() const;
  void set_product_price(double value);
  private:
  double _internal_product_price() const;
  void _internal_set_product_price(double value);
  public:

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.ProductPriceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double product_price_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fProductService_2eproto;
};
// -------------------------------------------------------------------

class CreateProductResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.CreateProductResponse) */ {
 public:
  inline CreateProductResponse() : CreateProductResponse(nullptr) {}
  ~CreateProductResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateProductResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProductResponse(const CreateProductResponse& from);
  CreateProductResponse(CreateProductResponse&& from) noexcept
    : CreateProductResponse() {
    *this = ::std::move(from);
  }

  inline CreateProductResponse& operator=(const CreateProductResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProductResponse& operator=(CreateProductResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProductResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProductResponse* internal_default_instance() {
    return reinterpret_cast<const CreateProductResponse*>(
               &_CreateProductResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateProductResponse& a, CreateProductResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProductResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProductResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateProductResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateProductResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProductResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateProductResponse& from) {
    CreateProductResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProductResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.CreateProductResponse";
  }
  protected:
  explicit CreateProductResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // .gRPCTest.Protos.Models.Product product = 1;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const ::gRPCTest::Protos::Models::Product& product() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Models::Product* release_product();
  ::gRPCTest::Protos::Models::Product* mutable_product();
  void set_allocated_product(::gRPCTest::Protos::Models::Product* product);
  private:
  const ::gRPCTest::Protos::Models::Product& _internal_product() const;
  ::gRPCTest::Protos::Models::Product* _internal_mutable_product();
  public:
  void unsafe_arena_set_allocated_product(
      ::gRPCTest::Protos::Models::Product* product);
  ::gRPCTest::Protos::Models::Product* unsafe_arena_release_product();

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.CreateProductResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gRPCTest::Protos::Models::Product* product_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fProductService_2eproto;
};
// -------------------------------------------------------------------

class FetchProductResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.FetchProductResponse) */ {
 public:
  inline FetchProductResponse() : FetchProductResponse(nullptr) {}
  ~FetchProductResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchProductResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchProductResponse(const FetchProductResponse& from);
  FetchProductResponse(FetchProductResponse&& from) noexcept
    : FetchProductResponse() {
    *this = ::std::move(from);
  }

  inline FetchProductResponse& operator=(const FetchProductResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchProductResponse& operator=(FetchProductResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchProductResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchProductResponse* internal_default_instance() {
    return reinterpret_cast<const FetchProductResponse*>(
               &_FetchProductResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FetchProductResponse& a, FetchProductResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchProductResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchProductResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchProductResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchProductResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchProductResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchProductResponse& from) {
    FetchProductResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchProductResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.FetchProductResponse";
  }
  protected:
  explicit FetchProductResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // .gRPCTest.Protos.Models.Product product = 1;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const ::gRPCTest::Protos::Models::Product& product() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Models::Product* release_product();
  ::gRPCTest::Protos::Models::Product* mutable_product();
  void set_allocated_product(::gRPCTest::Protos::Models::Product* product);
  private:
  const ::gRPCTest::Protos::Models::Product& _internal_product() const;
  ::gRPCTest::Protos::Models::Product* _internal_mutable_product();
  public:
  void unsafe_arena_set_allocated_product(
      ::gRPCTest::Protos::Models::Product* product);
  ::gRPCTest::Protos::Models::Product* unsafe_arena_release_product();

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.FetchProductResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gRPCTest::Protos::Models::Product* product_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fProductService_2eproto;
};
// -------------------------------------------------------------------

class FetchProductsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.FetchProductsResponse) */ {
 public:
  inline FetchProductsResponse() : FetchProductsResponse(nullptr) {}
  ~FetchProductsResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchProductsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchProductsResponse(const FetchProductsResponse& from);
  FetchProductsResponse(FetchProductsResponse&& from) noexcept
    : FetchProductsResponse() {
    *this = ::std::move(from);
  }

  inline FetchProductsResponse& operator=(const FetchProductsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchProductsResponse& operator=(FetchProductsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchProductsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchProductsResponse* internal_default_instance() {
    return reinterpret_cast<const FetchProductsResponse*>(
               &_FetchProductsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FetchProductsResponse& a, FetchProductsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchProductsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchProductsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchProductsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchProductsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchProductsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchProductsResponse& from) {
    FetchProductsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchProductsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.FetchProductsResponse";
  }
  protected:
  explicit FetchProductsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductsFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // repeated .gRPCTest.Protos.Models.Product products = 1;
  int products_size() const;
  private:
  int _internal_products_size() const;
  public:
  void clear_products();
  ::gRPCTest::Protos::Models::Product* mutable_products(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Product >*
      mutable_products();
  private:
  const ::gRPCTest::Protos::Models::Product& _internal_products(int index) const;
  ::gRPCTest::Protos::Models::Product* _internal_add_products();
  public:
  const ::gRPCTest::Protos::Models::Product& products(int index) const;
  ::gRPCTest::Protos::Models::Product* add_products();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Product >&
      products() const;

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.FetchProductsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Product > products_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fProductService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProductByIdRequest

// int64 product_id = 1;
inline void ProductByIdRequest::clear_product_id() {
  _impl_.product_id_ = int64_t{0};
}
inline int64_t ProductByIdRequest::_internal_product_id() const {
  return _impl_.product_id_;
}
inline int64_t ProductByIdRequest::product_id() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.ProductByIdRequest.product_id)
  return _internal_product_id();
}
inline void ProductByIdRequest::_internal_set_product_id(int64_t value) {
  
  _impl_.product_id_ = value;
}
inline void ProductByIdRequest::set_product_id(int64_t value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:gRPCTest.Protos.Services.ProductByIdRequest.product_id)
}

// -------------------------------------------------------------------

// ProductPriceRequest

// double product_price = 1;
inline void ProductPriceRequest::clear_product_price() {
  _impl_.product_price_ = 0;
}
inline double ProductPriceRequest::_internal_product_price() const {
  return _impl_.product_price_;
}
inline double ProductPriceRequest::product_price() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.ProductPriceRequest.product_price)
  return _internal_product_price();
}
inline void ProductPriceRequest::_internal_set_product_price(double value) {
  
  _impl_.product_price_ = value;
}
inline void ProductPriceRequest::set_product_price(double value) {
  _internal_set_product_price(value);
  // @@protoc_insertion_point(field_set:gRPCTest.Protos.Services.ProductPriceRequest.product_price)
}

// -------------------------------------------------------------------

// CreateProductResponse

// .gRPCTest.Protos.Models.Product product = 1;
inline bool CreateProductResponse::_internal_has_product() const {
  return this != internal_default_instance() && _impl_.product_ != nullptr;
}
inline bool CreateProductResponse::has_product() const {
  return _internal_has_product();
}
inline const ::gRPCTest::Protos::Models::Product& CreateProductResponse::_internal_product() const {
  const ::gRPCTest::Protos::Models::Product* p = _impl_.product_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Models::Product&>(
      ::gRPCTest::Protos::Models::_Product_default_instance_);
}
inline const ::gRPCTest::Protos::Models::Product& CreateProductResponse::product() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.CreateProductResponse.product)
  return _internal_product();
}
inline void CreateProductResponse::unsafe_arena_set_allocated_product(
    ::gRPCTest::Protos::Models::Product* product) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.product_);
  }
  _impl_.product_ = product;
  if (product) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.CreateProductResponse.product)
}
inline ::gRPCTest::Protos::Models::Product* CreateProductResponse::release_product() {
  
  ::gRPCTest::Protos::Models::Product* temp = _impl_.product_;
  _impl_.product_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Models::Product* CreateProductResponse::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.CreateProductResponse.product)
  
  ::gRPCTest::Protos::Models::Product* temp = _impl_.product_;
  _impl_.product_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Models::Product* CreateProductResponse::_internal_mutable_product() {
  
  if (_impl_.product_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Models::Product>(GetArenaForAllocation());
    _impl_.product_ = p;
  }
  return _impl_.product_;
}
inline ::gRPCTest::Protos::Models::Product* CreateProductResponse::mutable_product() {
  ::gRPCTest::Protos::Models::Product* _msg = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.CreateProductResponse.product)
  return _msg;
}
inline void CreateProductResponse::set_allocated_product(::gRPCTest::Protos::Models::Product* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.product_);
  }
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product));
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.product_ = product;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.CreateProductResponse.product)
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool CreateProductResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool CreateProductResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& CreateProductResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& CreateProductResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.CreateProductResponse.error_status)
  return _internal_error_status();
}
inline void CreateProductResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.CreateProductResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* CreateProductResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* CreateProductResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.CreateProductResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* CreateProductResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* CreateProductResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.CreateProductResponse.error_status)
  return _msg;
}
inline void CreateProductResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.CreateProductResponse.error_status)
}

// -------------------------------------------------------------------

// FetchProductResponse

// .gRPCTest.Protos.Models.Product product = 1;
inline bool FetchProductResponse::_internal_has_product() const {
  return this != internal_default_instance() && _impl_.product_ != nullptr;
}
inline bool FetchProductResponse::has_product() const {
  return _internal_has_product();
}
inline const ::gRPCTest::Protos::Models::Product& FetchProductResponse::_internal_product() const {
  const ::gRPCTest::Protos::Models::Product* p = _impl_.product_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Models::Product&>(
      ::gRPCTest::Protos::Models::_Product_default_instance_);
}
inline const ::gRPCTest::Protos::Models::Product& FetchProductResponse::product() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchProductResponse.product)
  return _internal_product();
}
inline void FetchProductResponse::unsafe_arena_set_allocated_product(
    ::gRPCTest::Protos::Models::Product* product) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.product_);
  }
  _impl_.product_ = product;
  if (product) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchProductResponse.product)
}
inline ::gRPCTest::Protos::Models::Product* FetchProductResponse::release_product() {
  
  ::gRPCTest::Protos::Models::Product* temp = _impl_.product_;
  _impl_.product_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Models::Product* FetchProductResponse::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchProductResponse.product)
  
  ::gRPCTest::Protos::Models::Product* temp = _impl_.product_;
  _impl_.product_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Models::Product* FetchProductResponse::_internal_mutable_product() {
  
  if (_impl_.product_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Models::Product>(GetArenaForAllocation());
    _impl_.product_ = p;
  }
  return _impl_.product_;
}
inline ::gRPCTest::Protos::Models::Product* FetchProductResponse::mutable_product() {
  ::gRPCTest::Protos::Models::Product* _msg = _internal_mutable_product();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchProductResponse.product)
  return _msg;
}
inline void FetchProductResponse::set_allocated_product(::gRPCTest::Protos::Models::Product* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.product_);
  }
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product));
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.product_ = product;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchProductResponse.product)
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool FetchProductResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool FetchProductResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchProductResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchProductResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchProductResponse.error_status)
  return _internal_error_status();
}
inline void FetchProductResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchProductResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchProductResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchProductResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchProductResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchProductResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchProductResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchProductResponse.error_status)
  return _msg;
}
inline void FetchProductResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchProductResponse.error_status)
}

// -------------------------------------------------------------------

// FetchProductsResponse

// repeated .gRPCTest.Protos.Models.Product products = 1;
inline int FetchProductsResponse::_internal_products_size() const {
  return _impl_.products_.size();
}
inline int FetchProductsResponse::products_size() const {
  return _internal_products_size();
}
inline ::gRPCTest::Protos::Models::Product* FetchProductsResponse::mutable_products(int index) {
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchProductsResponse.products)
  return _impl_.products_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Product >*
FetchProductsResponse::mutable_products() {
  // @@protoc_insertion_point(field_mutable_list:gRPCTest.Protos.Services.FetchProductsResponse.products)
  return &_impl_.products_;
}
inline const ::gRPCTest::Protos::Models::Product& FetchProductsResponse::_internal_products(int index) const {
  return _impl_.products_.Get(index);
}
inline const ::gRPCTest::Protos::Models::Product& FetchProductsResponse::products(int index) const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchProductsResponse.products)
  return _internal_products(index);
}
inline ::gRPCTest::Protos::Models::Product* FetchProductsResponse::_internal_add_products() {
  return _impl_.products_.Add();
}
inline ::gRPCTest::Protos::Models::Product* FetchProductsResponse::add_products() {
  ::gRPCTest::Protos::Models::Product* _add = _internal_add_products();
  // @@protoc_insertion_point(field_add:gRPCTest.Protos.Services.FetchProductsResponse.products)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Product >&
FetchProductsResponse::products() const {
  // @@protoc_insertion_point(field_list:gRPCTest.Protos.Services.FetchProductsResponse.products)
  return _impl_.products_;
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool FetchProductsResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool FetchProductsResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchProductsResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchProductsResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchProductsResponse.error_status)
  return _internal_error_status();
}
inline void FetchProductsResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchProductsResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchProductsResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchProductsResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchProductsResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchProductsResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchProductsResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchProductsResponse.error_status)
  return _msg;
}
inline void FetchProductsResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchProductsResponse.error_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fProductService_2eproto
