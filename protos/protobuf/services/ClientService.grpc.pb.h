// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/ClientService.proto
#ifndef GRPC_services_2fClientService_2eproto__INCLUDED
#define GRPC_services_2fClientService_2eproto__INCLUDED

#include "services/ClientService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace gRPCTest {
namespace Protos {
namespace Services {

// Client service. 
//
class ClientService final {
 public:
  static constexpr char const* service_full_name() {
    return "gRPCTest.Protos.Services.ClientService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateClient(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client& request, ::gRPCTest::Protos::Services::CreateClientResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::CreateClientResponse>> AsyncCreateClient(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::CreateClientResponse>>(AsyncCreateClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::CreateClientResponse>> PrepareAsyncCreateClient(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::CreateClientResponse>>(PrepareAsyncCreateClientRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchClientById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::gRPCTest::Protos::Services::FetchClientByIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchClientByIdResponse>> AsyncFetchClientById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchClientByIdResponse>>(AsyncFetchClientByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchClientByIdResponse>> PrepareAsyncFetchClientById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchClientByIdResponse>>(PrepareAsyncFetchClientByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchAllClients(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::gRPCTest::Protos::Services::FetchAllClientsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchAllClientsResponse>> AsyncFetchAllClients(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchAllClientsResponse>>(AsyncFetchAllClientsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchAllClientsResponse>> PrepareAsyncFetchAllClients(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchAllClientsResponse>>(PrepareAsyncFetchAllClientsRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchClientInvoices(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>> AsyncFetchClientInvoices(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>>(AsyncFetchClientInvoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>> PrepareAsyncFetchClientInvoices(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>>(PrepareAsyncFetchClientInvoicesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CreateClient(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client* request, ::gRPCTest::Protos::Services::CreateClientResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateClient(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client* request, ::gRPCTest::Protos::Services::CreateClientResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FetchClientById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::gRPCTest::Protos::Services::FetchClientByIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchClientById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::gRPCTest::Protos::Services::FetchClientByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FetchAllClients(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchAllClientsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchAllClients(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchAllClientsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FetchClientInvoices(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchClientInvoices(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::CreateClientResponse>* AsyncCreateClientRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::CreateClientResponse>* PrepareAsyncCreateClientRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchClientByIdResponse>* AsyncFetchClientByIdRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchClientByIdResponse>* PrepareAsyncFetchClientByIdRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchAllClientsResponse>* AsyncFetchAllClientsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchAllClientsResponse>* PrepareAsyncFetchAllClientsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>* AsyncFetchClientInvoicesRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>* PrepareAsyncFetchClientInvoicesRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateClient(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client& request, ::gRPCTest::Protos::Services::CreateClientResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateClientResponse>> AsyncCreateClient(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateClientResponse>>(AsyncCreateClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateClientResponse>> PrepareAsyncCreateClient(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateClientResponse>>(PrepareAsyncCreateClientRaw(context, request, cq));
    }
    ::grpc::Status FetchClientById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::gRPCTest::Protos::Services::FetchClientByIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchClientByIdResponse>> AsyncFetchClientById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchClientByIdResponse>>(AsyncFetchClientByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchClientByIdResponse>> PrepareAsyncFetchClientById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchClientByIdResponse>>(PrepareAsyncFetchClientByIdRaw(context, request, cq));
    }
    ::grpc::Status FetchAllClients(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::gRPCTest::Protos::Services::FetchAllClientsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchAllClientsResponse>> AsyncFetchAllClients(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchAllClientsResponse>>(AsyncFetchAllClientsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchAllClientsResponse>> PrepareAsyncFetchAllClients(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchAllClientsResponse>>(PrepareAsyncFetchAllClientsRaw(context, request, cq));
    }
    ::grpc::Status FetchClientInvoices(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>> AsyncFetchClientInvoices(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>>(AsyncFetchClientInvoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>> PrepareAsyncFetchClientInvoices(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>>(PrepareAsyncFetchClientInvoicesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateClient(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client* request, ::gRPCTest::Protos::Services::CreateClientResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateClient(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client* request, ::gRPCTest::Protos::Services::CreateClientResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchClientById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::gRPCTest::Protos::Services::FetchClientByIdResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchClientById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::gRPCTest::Protos::Services::FetchClientByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchAllClients(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchAllClientsResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchAllClients(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchAllClientsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchClientInvoices(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchClientInvoices(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateClientResponse>* AsyncCreateClientRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::CreateClientResponse>* PrepareAsyncCreateClientRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Client& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchClientByIdResponse>* AsyncFetchClientByIdRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchClientByIdResponse>* PrepareAsyncFetchClientByIdRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchAllClientsResponse>* AsyncFetchAllClientsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchAllClientsResponse>* PrepareAsyncFetchAllClientsRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>* AsyncFetchClientInvoicesRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>* PrepareAsyncFetchClientInvoicesRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateClient_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchClientById_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchAllClients_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchClientInvoices_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateClient(::grpc::ServerContext* context, const ::gRPCTest::Protos::Models::Client* request, ::gRPCTest::Protos::Services::CreateClientResponse* response);
    virtual ::grpc::Status FetchClientById(::grpc::ServerContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::gRPCTest::Protos::Services::FetchClientByIdResponse* response);
    virtual ::grpc::Status FetchAllClients(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchAllClientsResponse* response);
    virtual ::grpc::Status FetchClientInvoices(::grpc::ServerContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateClient() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateClient(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Client* /*request*/, ::gRPCTest::Protos::Services::CreateClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateClient(::grpc::ServerContext* context, ::gRPCTest::Protos::Models::Client* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::CreateClientResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchClientById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchClientById() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FetchClientById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchClientById(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchClientById(::grpc::ServerContext* context, ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::FetchClientByIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchAllClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchAllClients() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FetchAllClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAllClients(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchAllClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchAllClients(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::FetchAllClientsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchClientInvoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchClientInvoices() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FetchClientInvoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchClientInvoices(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchClientInvoices(::grpc::ServerContext* context, ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateClient<WithAsyncMethod_FetchClientById<WithAsyncMethod_FetchAllClients<WithAsyncMethod_FetchClientInvoices<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateClient() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Models::Client, ::gRPCTest::Protos::Services::CreateClientResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gRPCTest::Protos::Models::Client* request, ::gRPCTest::Protos::Services::CreateClientResponse* response) { return this->CreateClient(context, request, response); }));}
    void SetMessageAllocatorFor_CreateClient(
        ::grpc::MessageAllocator< ::gRPCTest::Protos::Models::Client, ::gRPCTest::Protos::Services::CreateClientResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Models::Client, ::gRPCTest::Protos::Services::CreateClientResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateClient(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Client* /*request*/, ::gRPCTest::Protos::Services::CreateClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateClient(
      ::grpc::CallbackServerContext* /*context*/, const ::gRPCTest::Protos::Models::Client* /*request*/, ::gRPCTest::Protos::Services::CreateClientResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchClientById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchClientById() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::ClientByIdRequest, ::gRPCTest::Protos::Services::FetchClientByIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::gRPCTest::Protos::Services::FetchClientByIdResponse* response) { return this->FetchClientById(context, request, response); }));}
    void SetMessageAllocatorFor_FetchClientById(
        ::grpc::MessageAllocator< ::gRPCTest::Protos::Services::ClientByIdRequest, ::gRPCTest::Protos::Services::FetchClientByIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::ClientByIdRequest, ::gRPCTest::Protos::Services::FetchClientByIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchClientById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchClientById(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchClientById(
      ::grpc::CallbackServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientByIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchAllClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchAllClients() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchAllClientsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchAllClientsResponse* response) { return this->FetchAllClients(context, request, response); }));}
    void SetMessageAllocatorFor_FetchAllClients(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchAllClientsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchAllClientsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchAllClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAllClients(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchAllClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchAllClients(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchAllClientsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchClientInvoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchClientInvoices() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::ClientByIdRequest, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gRPCTest::Protos::Services::ClientByIdRequest* request, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* response) { return this->FetchClientInvoices(context, request, response); }));}
    void SetMessageAllocatorFor_FetchClientInvoices(
        ::grpc::MessageAllocator< ::gRPCTest::Protos::Services::ClientByIdRequest, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::ClientByIdRequest, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchClientInvoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchClientInvoices(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchClientInvoices(
      ::grpc::CallbackServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateClient<WithCallbackMethod_FetchClientById<WithCallbackMethod_FetchAllClients<WithCallbackMethod_FetchClientInvoices<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateClient() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateClient(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Client* /*request*/, ::gRPCTest::Protos::Services::CreateClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchClientById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchClientById() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FetchClientById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchClientById(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchAllClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchAllClients() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FetchAllClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAllClients(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchAllClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchClientInvoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchClientInvoices() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FetchClientInvoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchClientInvoices(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateClient() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateClient(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Client* /*request*/, ::gRPCTest::Protos::Services::CreateClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateClient(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchClientById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchClientById() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FetchClientById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchClientById(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchClientById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchAllClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchAllClients() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FetchAllClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAllClients(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchAllClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchAllClients(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchClientInvoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchClientInvoices() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FetchClientInvoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchClientInvoices(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchClientInvoices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateClient() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateClient(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateClient(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Client* /*request*/, ::gRPCTest::Protos::Services::CreateClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateClient(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchClientById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchClientById() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchClientById(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchClientById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchClientById(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchClientById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchAllClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchAllClients() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchAllClients(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchAllClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchAllClients(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchAllClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchAllClients(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchClientInvoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchClientInvoices() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchClientInvoices(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchClientInvoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchClientInvoices(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchClientInvoices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateClient() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gRPCTest::Protos::Models::Client, ::gRPCTest::Protos::Services::CreateClientResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gRPCTest::Protos::Models::Client, ::gRPCTest::Protos::Services::CreateClientResponse>* streamer) {
                       return this->StreamedCreateClient(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateClient(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Client* /*request*/, ::gRPCTest::Protos::Services::CreateClientResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gRPCTest::Protos::Models::Client,::gRPCTest::Protos::Services::CreateClientResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchClientById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchClientById() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gRPCTest::Protos::Services::ClientByIdRequest, ::gRPCTest::Protos::Services::FetchClientByIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gRPCTest::Protos::Services::ClientByIdRequest, ::gRPCTest::Protos::Services::FetchClientByIdResponse>* streamer) {
                       return this->StreamedFetchClientById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchClientById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchClientById(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchClientById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gRPCTest::Protos::Services::ClientByIdRequest,::gRPCTest::Protos::Services::FetchClientByIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchAllClients : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchAllClients() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchAllClientsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchAllClientsResponse>* streamer) {
                       return this->StreamedFetchAllClients(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchAllClients() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchAllClients(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchAllClientsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchAllClients(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::gRPCTest::Protos::Services::FetchAllClientsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchClientInvoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchClientInvoices() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gRPCTest::Protos::Services::ClientByIdRequest, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gRPCTest::Protos::Services::ClientByIdRequest, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse>* streamer) {
                       return this->StreamedFetchClientInvoices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchClientInvoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchClientInvoices(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::ClientByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchClientInvoices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gRPCTest::Protos::Services::ClientByIdRequest,::gRPCTest::Protos::Services::FetchClientInvoicesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateClient<WithStreamedUnaryMethod_FetchClientById<WithStreamedUnaryMethod_FetchAllClients<WithStreamedUnaryMethod_FetchClientInvoices<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateClient<WithStreamedUnaryMethod_FetchClientById<WithStreamedUnaryMethod_FetchAllClients<WithStreamedUnaryMethod_FetchClientInvoices<Service > > > > StreamedService;
};

}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest


#endif  // GRPC_services_2fClientService_2eproto__INCLUDED
