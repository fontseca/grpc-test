// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/ClientService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fClientService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fClientService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "models/Invoice.pb.h"
#include "models/Client.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fClientService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fClientService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fClientService_2eproto;
namespace gRPCTest {
namespace Protos {
namespace Services {
class CreateClientResponse;
struct CreateClientResponseDefaultTypeInternal;
extern CreateClientResponseDefaultTypeInternal _CreateClientResponse_default_instance_;
class FetchInvoicesResponse;
struct FetchInvoicesResponseDefaultTypeInternal;
extern FetchInvoicesResponseDefaultTypeInternal _FetchInvoicesResponse_default_instance_;
class ListClientResponse;
struct ListClientResponseDefaultTypeInternal;
extern ListClientResponseDefaultTypeInternal _ListClientResponse_default_instance_;
class ServiceStatus;
struct ServiceStatusDefaultTypeInternal;
extern ServiceStatusDefaultTypeInternal _ServiceStatus_default_instance_;
}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest
PROTOBUF_NAMESPACE_OPEN
template<> ::gRPCTest::Protos::Services::CreateClientResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::CreateClientResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::FetchInvoicesResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::FetchInvoicesResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::ListClientResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::ListClientResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::ServiceStatus* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gRPCTest {
namespace Protos {
namespace Services {

// ===================================================================

class ServiceStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.ServiceStatus) */ {
 public:
  inline ServiceStatus() : ServiceStatus(nullptr) {}
  ~ServiceStatus() override;
  explicit PROTOBUF_CONSTEXPR ServiceStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceStatus(const ServiceStatus& from);
  ServiceStatus(ServiceStatus&& from) noexcept
    : ServiceStatus() {
    *this = ::std::move(from);
  }

  inline ServiceStatus& operator=(const ServiceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceStatus& operator=(ServiceStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceStatus* internal_default_instance() {
    return reinterpret_cast<const ServiceStatus*>(
               &_ServiceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceStatus& a, ServiceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServiceStatus& from) {
    ServiceStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.ServiceStatus";
  }
  protected:
  explicit ServiceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorMessageFieldNumber = 3,
    kSuccessfulFieldNumber = 1,
    kErrorCodeFieldNumber = 2,
  };
  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // bool successful = 1;
  void clear_successful();
  bool successful() const;
  void set_successful(bool value);
  private:
  bool _internal_successful() const;
  void _internal_set_successful(bool value);
  public:

  // int32 error_code = 2;
  void clear_error_code();
  int32_t error_code() const;
  void set_error_code(int32_t value);
  private:
  int32_t _internal_error_code() const;
  void _internal_set_error_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.ServiceStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    bool successful_;
    int32_t error_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fClientService_2eproto;
};
// -------------------------------------------------------------------

class CreateClientResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.CreateClientResponse) */ {
 public:
  inline CreateClientResponse() : CreateClientResponse(nullptr) {}
  ~CreateClientResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateClientResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateClientResponse(const CreateClientResponse& from);
  CreateClientResponse(CreateClientResponse&& from) noexcept
    : CreateClientResponse() {
    *this = ::std::move(from);
  }

  inline CreateClientResponse& operator=(const CreateClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateClientResponse& operator=(CreateClientResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateClientResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateClientResponse* internal_default_instance() {
    return reinterpret_cast<const CreateClientResponse*>(
               &_CreateClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateClientResponse& a, CreateClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateClientResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateClientResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateClientResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateClientResponse& from) {
    CreateClientResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateClientResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.CreateClientResponse";
  }
  protected:
  explicit CreateClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // .gRPCTest.Protos.Models.Client client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::gRPCTest::Protos::Models::Client& client() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Models::Client* release_client();
  ::gRPCTest::Protos::Models::Client* mutable_client();
  void set_allocated_client(::gRPCTest::Protos::Models::Client* client);
  private:
  const ::gRPCTest::Protos::Models::Client& _internal_client() const;
  ::gRPCTest::Protos::Models::Client* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::gRPCTest::Protos::Models::Client* client);
  ::gRPCTest::Protos::Models::Client* unsafe_arena_release_client();

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.CreateClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gRPCTest::Protos::Models::Client* client_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fClientService_2eproto;
};
// -------------------------------------------------------------------

class ListClientResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.ListClientResponse) */ {
 public:
  inline ListClientResponse() : ListClientResponse(nullptr) {}
  ~ListClientResponse() override;
  explicit PROTOBUF_CONSTEXPR ListClientResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListClientResponse(const ListClientResponse& from);
  ListClientResponse(ListClientResponse&& from) noexcept
    : ListClientResponse() {
    *this = ::std::move(from);
  }

  inline ListClientResponse& operator=(const ListClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListClientResponse& operator=(ListClientResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListClientResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListClientResponse* internal_default_instance() {
    return reinterpret_cast<const ListClientResponse*>(
               &_ListClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListClientResponse& a, ListClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListClientResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListClientResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListClientResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListClientResponse& from) {
    ListClientResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListClientResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.ListClientResponse";
  }
  protected:
  explicit ListClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientsFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // repeated .gRPCTest.Protos.Models.Client clients = 1;
  int clients_size() const;
  private:
  int _internal_clients_size() const;
  public:
  void clear_clients();
  ::gRPCTest::Protos::Models::Client* mutable_clients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Client >*
      mutable_clients();
  private:
  const ::gRPCTest::Protos::Models::Client& _internal_clients(int index) const;
  ::gRPCTest::Protos::Models::Client* _internal_add_clients();
  public:
  const ::gRPCTest::Protos::Models::Client& clients(int index) const;
  ::gRPCTest::Protos::Models::Client* add_clients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Client >&
      clients() const;

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.ListClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Client > clients_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fClientService_2eproto;
};
// -------------------------------------------------------------------

class FetchInvoicesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.FetchInvoicesResponse) */ {
 public:
  inline FetchInvoicesResponse() : FetchInvoicesResponse(nullptr) {}
  ~FetchInvoicesResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchInvoicesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchInvoicesResponse(const FetchInvoicesResponse& from);
  FetchInvoicesResponse(FetchInvoicesResponse&& from) noexcept
    : FetchInvoicesResponse() {
    *this = ::std::move(from);
  }

  inline FetchInvoicesResponse& operator=(const FetchInvoicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchInvoicesResponse& operator=(FetchInvoicesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchInvoicesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchInvoicesResponse* internal_default_instance() {
    return reinterpret_cast<const FetchInvoicesResponse*>(
               &_FetchInvoicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FetchInvoicesResponse& a, FetchInvoicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchInvoicesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchInvoicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchInvoicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchInvoicesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchInvoicesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchInvoicesResponse& from) {
    FetchInvoicesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchInvoicesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.FetchInvoicesResponse";
  }
  protected:
  explicit FetchInvoicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientsFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // repeated .gRPCTest.Protos.Models.Invoice clients = 1;
  int clients_size() const;
  private:
  int _internal_clients_size() const;
  public:
  void clear_clients();
  ::gRPCTest::Protos::Models::Invoice* mutable_clients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice >*
      mutable_clients();
  private:
  const ::gRPCTest::Protos::Models::Invoice& _internal_clients(int index) const;
  ::gRPCTest::Protos::Models::Invoice* _internal_add_clients();
  public:
  const ::gRPCTest::Protos::Models::Invoice& clients(int index) const;
  ::gRPCTest::Protos::Models::Invoice* add_clients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice >&
      clients() const;

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.FetchInvoicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice > clients_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fClientService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceStatus

// bool successful = 1;
inline void ServiceStatus::clear_successful() {
  _impl_.successful_ = false;
}
inline bool ServiceStatus::_internal_successful() const {
  return _impl_.successful_;
}
inline bool ServiceStatus::successful() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.ServiceStatus.successful)
  return _internal_successful();
}
inline void ServiceStatus::_internal_set_successful(bool value) {
  
  _impl_.successful_ = value;
}
inline void ServiceStatus::set_successful(bool value) {
  _internal_set_successful(value);
  // @@protoc_insertion_point(field_set:gRPCTest.Protos.Services.ServiceStatus.successful)
}

// int32 error_code = 2;
inline void ServiceStatus::clear_error_code() {
  _impl_.error_code_ = 0;
}
inline int32_t ServiceStatus::_internal_error_code() const {
  return _impl_.error_code_;
}
inline int32_t ServiceStatus::error_code() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.ServiceStatus.error_code)
  return _internal_error_code();
}
inline void ServiceStatus::_internal_set_error_code(int32_t value) {
  
  _impl_.error_code_ = value;
}
inline void ServiceStatus::set_error_code(int32_t value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:gRPCTest.Protos.Services.ServiceStatus.error_code)
}

// string error_message = 3;
inline void ServiceStatus::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& ServiceStatus::error_message() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.ServiceStatus.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceStatus::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.error_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gRPCTest.Protos.Services.ServiceStatus.error_message)
}
inline std::string* ServiceStatus::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.ServiceStatus.error_message)
  return _s;
}
inline const std::string& ServiceStatus::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void ServiceStatus::_internal_set_error_message(const std::string& value) {
  
  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* ServiceStatus::_internal_mutable_error_message() {
  
  return _impl_.error_message_.Mutable(GetArenaForAllocation());
}
inline std::string* ServiceStatus::release_error_message() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.ServiceStatus.error_message)
  return _impl_.error_message_.Release();
}
inline void ServiceStatus::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  _impl_.error_message_.SetAllocated(error_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_message_.IsDefault()) {
    _impl_.error_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.ServiceStatus.error_message)
}

// -------------------------------------------------------------------

// CreateClientResponse

// .gRPCTest.Protos.Models.Client client = 1;
inline bool CreateClientResponse::_internal_has_client() const {
  return this != internal_default_instance() && _impl_.client_ != nullptr;
}
inline bool CreateClientResponse::has_client() const {
  return _internal_has_client();
}
inline const ::gRPCTest::Protos::Models::Client& CreateClientResponse::_internal_client() const {
  const ::gRPCTest::Protos::Models::Client* p = _impl_.client_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Models::Client&>(
      ::gRPCTest::Protos::Models::_Client_default_instance_);
}
inline const ::gRPCTest::Protos::Models::Client& CreateClientResponse::client() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.CreateClientResponse.client)
  return _internal_client();
}
inline void CreateClientResponse::unsafe_arena_set_allocated_client(
    ::gRPCTest::Protos::Models::Client* client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_);
  }
  _impl_.client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.CreateClientResponse.client)
}
inline ::gRPCTest::Protos::Models::Client* CreateClientResponse::release_client() {
  
  ::gRPCTest::Protos::Models::Client* temp = _impl_.client_;
  _impl_.client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Models::Client* CreateClientResponse::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.CreateClientResponse.client)
  
  ::gRPCTest::Protos::Models::Client* temp = _impl_.client_;
  _impl_.client_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Models::Client* CreateClientResponse::_internal_mutable_client() {
  
  if (_impl_.client_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Models::Client>(GetArenaForAllocation());
    _impl_.client_ = p;
  }
  return _impl_.client_;
}
inline ::gRPCTest::Protos::Models::Client* CreateClientResponse::mutable_client() {
  ::gRPCTest::Protos::Models::Client* _msg = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.CreateClientResponse.client)
  return _msg;
}
inline void CreateClientResponse::set_allocated_client(::gRPCTest::Protos::Models::Client* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_);
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client));
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_ = client;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.CreateClientResponse.client)
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool CreateClientResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool CreateClientResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline void CreateClientResponse::clear_error_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& CreateClientResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& CreateClientResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.CreateClientResponse.error_status)
  return _internal_error_status();
}
inline void CreateClientResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.CreateClientResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* CreateClientResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* CreateClientResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.CreateClientResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* CreateClientResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* CreateClientResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.CreateClientResponse.error_status)
  return _msg;
}
inline void CreateClientResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.error_status_;
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error_status);
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.CreateClientResponse.error_status)
}

// -------------------------------------------------------------------

// ListClientResponse

// repeated .gRPCTest.Protos.Models.Client clients = 1;
inline int ListClientResponse::_internal_clients_size() const {
  return _impl_.clients_.size();
}
inline int ListClientResponse::clients_size() const {
  return _internal_clients_size();
}
inline ::gRPCTest::Protos::Models::Client* ListClientResponse::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.ListClientResponse.clients)
  return _impl_.clients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Client >*
ListClientResponse::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:gRPCTest.Protos.Services.ListClientResponse.clients)
  return &_impl_.clients_;
}
inline const ::gRPCTest::Protos::Models::Client& ListClientResponse::_internal_clients(int index) const {
  return _impl_.clients_.Get(index);
}
inline const ::gRPCTest::Protos::Models::Client& ListClientResponse::clients(int index) const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.ListClientResponse.clients)
  return _internal_clients(index);
}
inline ::gRPCTest::Protos::Models::Client* ListClientResponse::_internal_add_clients() {
  return _impl_.clients_.Add();
}
inline ::gRPCTest::Protos::Models::Client* ListClientResponse::add_clients() {
  ::gRPCTest::Protos::Models::Client* _add = _internal_add_clients();
  // @@protoc_insertion_point(field_add:gRPCTest.Protos.Services.ListClientResponse.clients)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Client >&
ListClientResponse::clients() const {
  // @@protoc_insertion_point(field_list:gRPCTest.Protos.Services.ListClientResponse.clients)
  return _impl_.clients_;
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool ListClientResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool ListClientResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline void ListClientResponse::clear_error_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& ListClientResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& ListClientResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.ListClientResponse.error_status)
  return _internal_error_status();
}
inline void ListClientResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.ListClientResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* ListClientResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* ListClientResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.ListClientResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* ListClientResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* ListClientResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.ListClientResponse.error_status)
  return _msg;
}
inline void ListClientResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.error_status_;
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error_status);
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.ListClientResponse.error_status)
}

// -------------------------------------------------------------------

// FetchInvoicesResponse

// repeated .gRPCTest.Protos.Models.Invoice clients = 1;
inline int FetchInvoicesResponse::_internal_clients_size() const {
  return _impl_.clients_.size();
}
inline int FetchInvoicesResponse::clients_size() const {
  return _internal_clients_size();
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoicesResponse::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchInvoicesResponse.clients)
  return _impl_.clients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice >*
FetchInvoicesResponse::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:gRPCTest.Protos.Services.FetchInvoicesResponse.clients)
  return &_impl_.clients_;
}
inline const ::gRPCTest::Protos::Models::Invoice& FetchInvoicesResponse::_internal_clients(int index) const {
  return _impl_.clients_.Get(index);
}
inline const ::gRPCTest::Protos::Models::Invoice& FetchInvoicesResponse::clients(int index) const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchInvoicesResponse.clients)
  return _internal_clients(index);
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoicesResponse::_internal_add_clients() {
  return _impl_.clients_.Add();
}
inline ::gRPCTest::Protos::Models::Invoice* FetchInvoicesResponse::add_clients() {
  ::gRPCTest::Protos::Models::Invoice* _add = _internal_add_clients();
  // @@protoc_insertion_point(field_add:gRPCTest.Protos.Services.FetchInvoicesResponse.clients)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice >&
FetchInvoicesResponse::clients() const {
  // @@protoc_insertion_point(field_list:gRPCTest.Protos.Services.FetchInvoicesResponse.clients)
  return _impl_.clients_;
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool FetchInvoicesResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool FetchInvoicesResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline void FetchInvoicesResponse::clear_error_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.error_status_ != nullptr) {
    delete _impl_.error_status_;
  }
  _impl_.error_status_ = nullptr;
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchInvoicesResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchInvoicesResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchInvoicesResponse.error_status)
  return _internal_error_status();
}
inline void FetchInvoicesResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchInvoicesResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoicesResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoicesResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchInvoicesResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoicesResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchInvoicesResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchInvoicesResponse.error_status)
  return _msg;
}
inline void FetchInvoicesResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.error_status_;
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(error_status);
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchInvoicesResponse.error_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fClientService_2eproto
