// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: services/InvoiceService.proto
#ifndef GRPC_services_2fInvoiceService_2eproto__INCLUDED
#define GRPC_services_2fInvoiceService_2eproto__INCLUDED

#include "services/InvoiceService.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace gRPCTest {
namespace Protos {
namespace Services {

// Invoice service.  
//
class InvoiceService final {
 public:
  static constexpr char const* service_full_name() {
    return "gRPCTest.Protos.Services.InvoiceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterInvoice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>> AsyncRegisterInvoice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>>(AsyncRegisterInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>> PrepareAsyncRegisterInvoice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>>(PrepareAsyncRegisterInvoiceRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchInvoiceById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>> AsyncFetchInvoiceById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>>(AsyncFetchInvoiceByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>> PrepareAsyncFetchInvoiceById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>>(PrepareAsyncFetchInvoiceByIdRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchInvoiceByDate(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>> AsyncFetchInvoiceByDate(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>>(AsyncFetchInvoiceByDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>> PrepareAsyncFetchInvoiceByDate(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>>(PrepareAsyncFetchInvoiceByDateRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchInvoiceDetails(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>> AsyncFetchInvoiceDetails(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>>(AsyncFetchInvoiceDetailsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>> PrepareAsyncFetchInvoiceDetails(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>>(PrepareAsyncFetchInvoiceDetailsRaw(context, request, cq));
    }
    virtual ::grpc::Status FetchInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::gRPCTest::Protos::Services::FetchInvoicesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoicesResponse>> AsyncFetchInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoicesResponse>>(AsyncFetchInvoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoicesResponse>> PrepareAsyncFetchInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoicesResponse>>(PrepareAsyncFetchInvoicesRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void RegisterInvoice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice* request, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RegisterInvoice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice* request, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FetchInvoiceById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchInvoiceById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FetchInvoiceByDate(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchInvoiceByDate(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FetchInvoiceDetails(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchInvoiceDetails(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FetchInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchInvoicesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FetchInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchInvoicesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>* AsyncRegisterInvoiceRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>* PrepareAsyncRegisterInvoiceRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>* AsyncFetchInvoiceByIdRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>* PrepareAsyncFetchInvoiceByIdRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>* AsyncFetchInvoiceByDateRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>* PrepareAsyncFetchInvoiceByDateRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>* AsyncFetchInvoiceDetailsRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>* PrepareAsyncFetchInvoiceDetailsRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoicesResponse>* AsyncFetchInvoicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::gRPCTest::Protos::Services::FetchInvoicesResponse>* PrepareAsyncFetchInvoicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status RegisterInvoice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>> AsyncRegisterInvoice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>>(AsyncRegisterInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>> PrepareAsyncRegisterInvoice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>>(PrepareAsyncRegisterInvoiceRaw(context, request, cq));
    }
    ::grpc::Status FetchInvoiceById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>> AsyncFetchInvoiceById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>>(AsyncFetchInvoiceByIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>> PrepareAsyncFetchInvoiceById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>>(PrepareAsyncFetchInvoiceByIdRaw(context, request, cq));
    }
    ::grpc::Status FetchInvoiceByDate(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>> AsyncFetchInvoiceByDate(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>>(AsyncFetchInvoiceByDateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>> PrepareAsyncFetchInvoiceByDate(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>>(PrepareAsyncFetchInvoiceByDateRaw(context, request, cq));
    }
    ::grpc::Status FetchInvoiceDetails(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>> AsyncFetchInvoiceDetails(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>>(AsyncFetchInvoiceDetailsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>> PrepareAsyncFetchInvoiceDetails(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>>(PrepareAsyncFetchInvoiceDetailsRaw(context, request, cq));
    }
    ::grpc::Status FetchInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::gRPCTest::Protos::Services::FetchInvoicesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoicesResponse>> AsyncFetchInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoicesResponse>>(AsyncFetchInvoicesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoicesResponse>> PrepareAsyncFetchInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoicesResponse>>(PrepareAsyncFetchInvoicesRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void RegisterInvoice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice* request, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* response, std::function<void(::grpc::Status)>) override;
      void RegisterInvoice(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice* request, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchInvoiceById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchInvoiceById(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchInvoiceByDate(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchInvoiceByDate(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchInvoiceDetails(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchInvoiceDetails(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FetchInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchInvoicesResponse* response, std::function<void(::grpc::Status)>) override;
      void FetchInvoices(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchInvoicesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>* AsyncRegisterInvoiceRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>* PrepareAsyncRegisterInvoiceRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Models::Invoice& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>* AsyncFetchInvoiceByIdRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>* PrepareAsyncFetchInvoiceByIdRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>* AsyncFetchInvoiceByDateRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>* PrepareAsyncFetchInvoiceByDateRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>* AsyncFetchInvoiceDetailsRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>* PrepareAsyncFetchInvoiceDetailsRaw(::grpc::ClientContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoicesResponse>* AsyncFetchInvoicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::gRPCTest::Protos::Services::FetchInvoicesResponse>* PrepareAsyncFetchInvoicesRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterInvoice_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchInvoiceById_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchInvoiceByDate_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchInvoiceDetails_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchInvoices_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterInvoice(::grpc::ServerContext* context, const ::gRPCTest::Protos::Models::Invoice* request, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* response);
    virtual ::grpc::Status FetchInvoiceById(::grpc::ServerContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* response);
    virtual ::grpc::Status FetchInvoiceByDate(::grpc::ServerContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* response);
    virtual ::grpc::Status FetchInvoiceDetails(::grpc::ServerContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* response);
    virtual ::grpc::Status FetchInvoices(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchInvoicesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RegisterInvoice() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInvoice(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Invoice* /*request*/, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterInvoice(::grpc::ServerContext* context, ::gRPCTest::Protos::Models::Invoice* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::RegisterInvoiceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchInvoiceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchInvoiceById() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FetchInvoiceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceById(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchInvoiceById(::grpc::ServerContext* context, ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchInvoiceByDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchInvoiceByDate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FetchInvoiceByDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceByDate(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchInvoiceByDate(::grpc::ServerContext* context, ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchInvoiceDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchInvoiceDetails() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_FetchInvoiceDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceDetails(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchInvoiceDetails(::grpc::ServerContext* context, ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchInvoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FetchInvoices() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_FetchInvoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchInvoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchInvoices(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::gRPCTest::Protos::Services::FetchInvoicesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterInvoice<WithAsyncMethod_FetchInvoiceById<WithAsyncMethod_FetchInvoiceByDate<WithAsyncMethod_FetchInvoiceDetails<WithAsyncMethod_FetchInvoices<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_RegisterInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RegisterInvoice() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Models::Invoice, ::gRPCTest::Protos::Services::RegisterInvoiceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gRPCTest::Protos::Models::Invoice* request, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* response) { return this->RegisterInvoice(context, request, response); }));}
    void SetMessageAllocatorFor_RegisterInvoice(
        ::grpc::MessageAllocator< ::gRPCTest::Protos::Models::Invoice, ::gRPCTest::Protos::Services::RegisterInvoiceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Models::Invoice, ::gRPCTest::Protos::Services::RegisterInvoiceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RegisterInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInvoice(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Invoice* /*request*/, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::gRPCTest::Protos::Models::Invoice* /*request*/, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchInvoiceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchInvoiceById() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::InvoiceByIdRequest, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* response) { return this->FetchInvoiceById(context, request, response); }));}
    void SetMessageAllocatorFor_FetchInvoiceById(
        ::grpc::MessageAllocator< ::gRPCTest::Protos::Services::InvoiceByIdRequest, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::InvoiceByIdRequest, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchInvoiceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceById(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchInvoiceById(
      ::grpc::CallbackServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchInvoiceByDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchInvoiceByDate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* response) { return this->FetchInvoiceByDate(context, request, response); }));}
    void SetMessageAllocatorFor_FetchInvoiceByDate(
        ::grpc::MessageAllocator< ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchInvoiceByDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceByDate(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchInvoiceByDate(
      ::grpc::CallbackServerContext* /*context*/, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchInvoiceDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchInvoiceDetails() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::InvoiceByIdRequest, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* request, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* response) { return this->FetchInvoiceDetails(context, request, response); }));}
    void SetMessageAllocatorFor_FetchInvoiceDetails(
        ::grpc::MessageAllocator< ::gRPCTest::Protos::Services::InvoiceByIdRequest, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::gRPCTest::Protos::Services::InvoiceByIdRequest, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchInvoiceDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceDetails(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchInvoiceDetails(
      ::grpc::CallbackServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FetchInvoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FetchInvoices() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchInvoicesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::gRPCTest::Protos::Services::FetchInvoicesResponse* response) { return this->FetchInvoices(context, request, response); }));}
    void SetMessageAllocatorFor_FetchInvoices(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchInvoicesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchInvoicesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FetchInvoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchInvoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchInvoices(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchInvoicesResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_RegisterInvoice<WithCallbackMethod_FetchInvoiceById<WithCallbackMethod_FetchInvoiceByDate<WithCallbackMethod_FetchInvoiceDetails<WithCallbackMethod_FetchInvoices<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_RegisterInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RegisterInvoice() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInvoice(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Invoice* /*request*/, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchInvoiceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchInvoiceById() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FetchInvoiceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceById(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchInvoiceByDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchInvoiceByDate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FetchInvoiceByDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceByDate(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchInvoiceDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchInvoiceDetails() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_FetchInvoiceDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceDetails(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchInvoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FetchInvoices() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_FetchInvoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchInvoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RegisterInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RegisterInvoice() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RegisterInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInvoice(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Invoice* /*request*/, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterInvoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchInvoiceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchInvoiceById() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FetchInvoiceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceById(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchInvoiceById(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchInvoiceByDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchInvoiceByDate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FetchInvoiceByDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceByDate(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchInvoiceByDate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchInvoiceDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchInvoiceDetails() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_FetchInvoiceDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceDetails(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchInvoiceDetails(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchInvoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FetchInvoices() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_FetchInvoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchInvoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchInvoices(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RegisterInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RegisterInvoice() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RegisterInvoice(context, request, response); }));
    }
    ~WithRawCallbackMethod_RegisterInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterInvoice(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Invoice* /*request*/, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RegisterInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchInvoiceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchInvoiceById() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchInvoiceById(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchInvoiceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceById(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchInvoiceById(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchInvoiceByDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchInvoiceByDate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchInvoiceByDate(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchInvoiceByDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceByDate(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchInvoiceByDate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchInvoiceDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchInvoiceDetails() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchInvoiceDetails(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchInvoiceDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoiceDetails(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchInvoiceDetails(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FetchInvoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FetchInvoices() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FetchInvoices(context, request, response); }));
    }
    ~WithRawCallbackMethod_FetchInvoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchInvoices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchInvoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FetchInvoices(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RegisterInvoice() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gRPCTest::Protos::Models::Invoice, ::gRPCTest::Protos::Services::RegisterInvoiceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gRPCTest::Protos::Models::Invoice, ::gRPCTest::Protos::Services::RegisterInvoiceResponse>* streamer) {
                       return this->StreamedRegisterInvoice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RegisterInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterInvoice(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Models::Invoice* /*request*/, ::gRPCTest::Protos::Services::RegisterInvoiceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterInvoice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gRPCTest::Protos::Models::Invoice,::gRPCTest::Protos::Services::RegisterInvoiceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchInvoiceById : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchInvoiceById() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gRPCTest::Protos::Services::InvoiceByIdRequest, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gRPCTest::Protos::Services::InvoiceByIdRequest, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>* streamer) {
                       return this->StreamedFetchInvoiceById(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchInvoiceById() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchInvoiceById(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchInvoiceById(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gRPCTest::Protos::Services::InvoiceByIdRequest,::gRPCTest::Protos::Services::FetchInvoiceByIdResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchInvoiceByDate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchInvoiceByDate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>* streamer) {
                       return this->StreamedFetchInvoiceByDate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchInvoiceByDate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchInvoiceByDate(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceByDateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchInvoiceByDate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gRPCTest::Protos::Services::FetchInvoiceByDateRequest,::gRPCTest::Protos::Services::FetchInvoiceByDateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchInvoiceDetails : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchInvoiceDetails() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::gRPCTest::Protos::Services::InvoiceByIdRequest, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::gRPCTest::Protos::Services::InvoiceByIdRequest, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>* streamer) {
                       return this->StreamedFetchInvoiceDetails(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchInvoiceDetails() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchInvoiceDetails(::grpc::ServerContext* /*context*/, const ::gRPCTest::Protos::Services::InvoiceByIdRequest* /*request*/, ::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchInvoiceDetails(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::gRPCTest::Protos::Services::InvoiceByIdRequest,::gRPCTest::Protos::Services::FetchInvoiceDetailsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FetchInvoices : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FetchInvoices() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchInvoicesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::gRPCTest::Protos::Services::FetchInvoicesResponse>* streamer) {
                       return this->StreamedFetchInvoices(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FetchInvoices() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchInvoices(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::gRPCTest::Protos::Services::FetchInvoicesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFetchInvoices(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::gRPCTest::Protos::Services::FetchInvoicesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterInvoice<WithStreamedUnaryMethod_FetchInvoiceById<WithStreamedUnaryMethod_FetchInvoiceByDate<WithStreamedUnaryMethod_FetchInvoiceDetails<WithStreamedUnaryMethod_FetchInvoices<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterInvoice<WithStreamedUnaryMethod_FetchInvoiceById<WithStreamedUnaryMethod_FetchInvoiceByDate<WithStreamedUnaryMethod_FetchInvoiceDetails<WithStreamedUnaryMethod_FetchInvoices<Service > > > > > StreamedService;
};

}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest


#endif  // GRPC_services_2fInvoiceService_2eproto__INCLUDED
