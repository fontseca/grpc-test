// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: services/ClientService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_services_2fClientService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_services_2fClientService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
#include "models/Invoice.pb.h"
#include "models/Client.pb.h"
#include "common/ServiceStatus.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_services_2fClientService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_services_2fClientService_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_services_2fClientService_2eproto;
namespace gRPCTest {
namespace Protos {
namespace Services {
class ClientByIdRequest;
struct ClientByIdRequestDefaultTypeInternal;
extern ClientByIdRequestDefaultTypeInternal _ClientByIdRequest_default_instance_;
class CreateClientResponse;
struct CreateClientResponseDefaultTypeInternal;
extern CreateClientResponseDefaultTypeInternal _CreateClientResponse_default_instance_;
class FetchAllClientsResponse;
struct FetchAllClientsResponseDefaultTypeInternal;
extern FetchAllClientsResponseDefaultTypeInternal _FetchAllClientsResponse_default_instance_;
class FetchClientByIdResponse;
struct FetchClientByIdResponseDefaultTypeInternal;
extern FetchClientByIdResponseDefaultTypeInternal _FetchClientByIdResponse_default_instance_;
class FetchClientInvoicesResponse;
struct FetchClientInvoicesResponseDefaultTypeInternal;
extern FetchClientInvoicesResponseDefaultTypeInternal _FetchClientInvoicesResponse_default_instance_;
}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest
PROTOBUF_NAMESPACE_OPEN
template<> ::gRPCTest::Protos::Services::ClientByIdRequest* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::ClientByIdRequest>(Arena*);
template<> ::gRPCTest::Protos::Services::CreateClientResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::CreateClientResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::FetchAllClientsResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::FetchAllClientsResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::FetchClientByIdResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::FetchClientByIdResponse>(Arena*);
template<> ::gRPCTest::Protos::Services::FetchClientInvoicesResponse* Arena::CreateMaybeMessage<::gRPCTest::Protos::Services::FetchClientInvoicesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gRPCTest {
namespace Protos {
namespace Services {

// ===================================================================

class ClientByIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.ClientByIdRequest) */ {
 public:
  inline ClientByIdRequest() : ClientByIdRequest(nullptr) {}
  ~ClientByIdRequest() override;
  explicit PROTOBUF_CONSTEXPR ClientByIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientByIdRequest(const ClientByIdRequest& from);
  ClientByIdRequest(ClientByIdRequest&& from) noexcept
    : ClientByIdRequest() {
    *this = ::std::move(from);
  }

  inline ClientByIdRequest& operator=(const ClientByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientByIdRequest& operator=(ClientByIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientByIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientByIdRequest* internal_default_instance() {
    return reinterpret_cast<const ClientByIdRequest*>(
               &_ClientByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientByIdRequest& a, ClientByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientByIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientByIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientByIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientByIdRequest& from) {
    ClientByIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientByIdRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.ClientByIdRequest";
  }
  protected:
  explicit ClientByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // uint64 client_id = 1;
  void clear_client_id();
  uint64_t client_id() const;
  void set_client_id(uint64_t value);
  private:
  uint64_t _internal_client_id() const;
  void _internal_set_client_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.ClientByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fClientService_2eproto;
};
// -------------------------------------------------------------------

class CreateClientResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.CreateClientResponse) */ {
 public:
  inline CreateClientResponse() : CreateClientResponse(nullptr) {}
  ~CreateClientResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateClientResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateClientResponse(const CreateClientResponse& from);
  CreateClientResponse(CreateClientResponse&& from) noexcept
    : CreateClientResponse() {
    *this = ::std::move(from);
  }

  inline CreateClientResponse& operator=(const CreateClientResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateClientResponse& operator=(CreateClientResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateClientResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateClientResponse* internal_default_instance() {
    return reinterpret_cast<const CreateClientResponse*>(
               &_CreateClientResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateClientResponse& a, CreateClientResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateClientResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateClientResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateClientResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateClientResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateClientResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateClientResponse& from) {
    CreateClientResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateClientResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.CreateClientResponse";
  }
  protected:
  explicit CreateClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // .gRPCTest.Protos.Models.Client client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::gRPCTest::Protos::Models::Client& client() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Models::Client* release_client();
  ::gRPCTest::Protos::Models::Client* mutable_client();
  void set_allocated_client(::gRPCTest::Protos::Models::Client* client);
  private:
  const ::gRPCTest::Protos::Models::Client& _internal_client() const;
  ::gRPCTest::Protos::Models::Client* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::gRPCTest::Protos::Models::Client* client);
  ::gRPCTest::Protos::Models::Client* unsafe_arena_release_client();

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.CreateClientResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gRPCTest::Protos::Models::Client* client_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fClientService_2eproto;
};
// -------------------------------------------------------------------

class FetchClientByIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.FetchClientByIdResponse) */ {
 public:
  inline FetchClientByIdResponse() : FetchClientByIdResponse(nullptr) {}
  ~FetchClientByIdResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchClientByIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchClientByIdResponse(const FetchClientByIdResponse& from);
  FetchClientByIdResponse(FetchClientByIdResponse&& from) noexcept
    : FetchClientByIdResponse() {
    *this = ::std::move(from);
  }

  inline FetchClientByIdResponse& operator=(const FetchClientByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchClientByIdResponse& operator=(FetchClientByIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchClientByIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchClientByIdResponse* internal_default_instance() {
    return reinterpret_cast<const FetchClientByIdResponse*>(
               &_FetchClientByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FetchClientByIdResponse& a, FetchClientByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchClientByIdResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchClientByIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchClientByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchClientByIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchClientByIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchClientByIdResponse& from) {
    FetchClientByIdResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchClientByIdResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.FetchClientByIdResponse";
  }
  protected:
  explicit FetchClientByIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // .gRPCTest.Protos.Models.Client client = 1;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::gRPCTest::Protos::Models::Client& client() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Models::Client* release_client();
  ::gRPCTest::Protos::Models::Client* mutable_client();
  void set_allocated_client(::gRPCTest::Protos::Models::Client* client);
  private:
  const ::gRPCTest::Protos::Models::Client& _internal_client() const;
  ::gRPCTest::Protos::Models::Client* _internal_mutable_client();
  public:
  void unsafe_arena_set_allocated_client(
      ::gRPCTest::Protos::Models::Client* client);
  ::gRPCTest::Protos::Models::Client* unsafe_arena_release_client();

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.FetchClientByIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::gRPCTest::Protos::Models::Client* client_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fClientService_2eproto;
};
// -------------------------------------------------------------------

class FetchAllClientsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.FetchAllClientsResponse) */ {
 public:
  inline FetchAllClientsResponse() : FetchAllClientsResponse(nullptr) {}
  ~FetchAllClientsResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchAllClientsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchAllClientsResponse(const FetchAllClientsResponse& from);
  FetchAllClientsResponse(FetchAllClientsResponse&& from) noexcept
    : FetchAllClientsResponse() {
    *this = ::std::move(from);
  }

  inline FetchAllClientsResponse& operator=(const FetchAllClientsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchAllClientsResponse& operator=(FetchAllClientsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchAllClientsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchAllClientsResponse* internal_default_instance() {
    return reinterpret_cast<const FetchAllClientsResponse*>(
               &_FetchAllClientsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FetchAllClientsResponse& a, FetchAllClientsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchAllClientsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchAllClientsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchAllClientsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchAllClientsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchAllClientsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchAllClientsResponse& from) {
    FetchAllClientsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchAllClientsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.FetchAllClientsResponse";
  }
  protected:
  explicit FetchAllClientsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientsFieldNumber = 1,
    kErrorStatusFieldNumber = 2,
  };
  // repeated .gRPCTest.Protos.Models.Client clients = 1;
  int clients_size() const;
  private:
  int _internal_clients_size() const;
  public:
  void clear_clients();
  ::gRPCTest::Protos::Models::Client* mutable_clients(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Client >*
      mutable_clients();
  private:
  const ::gRPCTest::Protos::Models::Client& _internal_clients(int index) const;
  ::gRPCTest::Protos::Models::Client* _internal_add_clients();
  public:
  const ::gRPCTest::Protos::Models::Client& clients(int index) const;
  ::gRPCTest::Protos::Models::Client* add_clients();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Client >&
      clients() const;

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.FetchAllClientsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Client > clients_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fClientService_2eproto;
};
// -------------------------------------------------------------------

class FetchClientInvoicesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gRPCTest.Protos.Services.FetchClientInvoicesResponse) */ {
 public:
  inline FetchClientInvoicesResponse() : FetchClientInvoicesResponse(nullptr) {}
  ~FetchClientInvoicesResponse() override;
  explicit PROTOBUF_CONSTEXPR FetchClientInvoicesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchClientInvoicesResponse(const FetchClientInvoicesResponse& from);
  FetchClientInvoicesResponse(FetchClientInvoicesResponse&& from) noexcept
    : FetchClientInvoicesResponse() {
    *this = ::std::move(from);
  }

  inline FetchClientInvoicesResponse& operator=(const FetchClientInvoicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchClientInvoicesResponse& operator=(FetchClientInvoicesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchClientInvoicesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchClientInvoicesResponse* internal_default_instance() {
    return reinterpret_cast<const FetchClientInvoicesResponse*>(
               &_FetchClientInvoicesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FetchClientInvoicesResponse& a, FetchClientInvoicesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchClientInvoicesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchClientInvoicesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FetchClientInvoicesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FetchClientInvoicesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchClientInvoicesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FetchClientInvoicesResponse& from) {
    FetchClientInvoicesResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchClientInvoicesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gRPCTest.Protos.Services.FetchClientInvoicesResponse";
  }
  protected:
  explicit FetchClientInvoicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvoicesFieldNumber = 2,
    kErrorStatusFieldNumber = 3,
    kClinetIdFieldNumber = 1,
  };
  // repeated .gRPCTest.Protos.Models.Invoice invoices = 2;
  int invoices_size() const;
  private:
  int _internal_invoices_size() const;
  public:
  void clear_invoices();
  ::gRPCTest::Protos::Models::Invoice* mutable_invoices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice >*
      mutable_invoices();
  private:
  const ::gRPCTest::Protos::Models::Invoice& _internal_invoices(int index) const;
  ::gRPCTest::Protos::Models::Invoice* _internal_add_invoices();
  public:
  const ::gRPCTest::Protos::Models::Invoice& invoices(int index) const;
  ::gRPCTest::Protos::Models::Invoice* add_invoices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice >&
      invoices() const;

  // .gRPCTest.Protos.Services.ServiceStatus error_status = 3;
  bool has_error_status() const;
  private:
  bool _internal_has_error_status() const;
  public:
  void clear_error_status();
  const ::gRPCTest::Protos::Services::ServiceStatus& error_status() const;
  PROTOBUF_NODISCARD ::gRPCTest::Protos::Services::ServiceStatus* release_error_status();
  ::gRPCTest::Protos::Services::ServiceStatus* mutable_error_status();
  void set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status);
  private:
  const ::gRPCTest::Protos::Services::ServiceStatus& _internal_error_status() const;
  ::gRPCTest::Protos::Services::ServiceStatus* _internal_mutable_error_status();
  public:
  void unsafe_arena_set_allocated_error_status(
      ::gRPCTest::Protos::Services::ServiceStatus* error_status);
  ::gRPCTest::Protos::Services::ServiceStatus* unsafe_arena_release_error_status();

  // uint64 clinet_id = 1;
  void clear_clinet_id();
  uint64_t clinet_id() const;
  void set_clinet_id(uint64_t value);
  private:
  uint64_t _internal_clinet_id() const;
  void _internal_set_clinet_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:gRPCTest.Protos.Services.FetchClientInvoicesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice > invoices_;
    ::gRPCTest::Protos::Services::ServiceStatus* error_status_;
    uint64_t clinet_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_services_2fClientService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientByIdRequest

// uint64 client_id = 1;
inline void ClientByIdRequest::clear_client_id() {
  _impl_.client_id_ = uint64_t{0u};
}
inline uint64_t ClientByIdRequest::_internal_client_id() const {
  return _impl_.client_id_;
}
inline uint64_t ClientByIdRequest::client_id() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.ClientByIdRequest.client_id)
  return _internal_client_id();
}
inline void ClientByIdRequest::_internal_set_client_id(uint64_t value) {
  
  _impl_.client_id_ = value;
}
inline void ClientByIdRequest::set_client_id(uint64_t value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:gRPCTest.Protos.Services.ClientByIdRequest.client_id)
}

// -------------------------------------------------------------------

// CreateClientResponse

// .gRPCTest.Protos.Models.Client client = 1;
inline bool CreateClientResponse::_internal_has_client() const {
  return this != internal_default_instance() && _impl_.client_ != nullptr;
}
inline bool CreateClientResponse::has_client() const {
  return _internal_has_client();
}
inline const ::gRPCTest::Protos::Models::Client& CreateClientResponse::_internal_client() const {
  const ::gRPCTest::Protos::Models::Client* p = _impl_.client_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Models::Client&>(
      ::gRPCTest::Protos::Models::_Client_default_instance_);
}
inline const ::gRPCTest::Protos::Models::Client& CreateClientResponse::client() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.CreateClientResponse.client)
  return _internal_client();
}
inline void CreateClientResponse::unsafe_arena_set_allocated_client(
    ::gRPCTest::Protos::Models::Client* client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_);
  }
  _impl_.client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.CreateClientResponse.client)
}
inline ::gRPCTest::Protos::Models::Client* CreateClientResponse::release_client() {
  
  ::gRPCTest::Protos::Models::Client* temp = _impl_.client_;
  _impl_.client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Models::Client* CreateClientResponse::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.CreateClientResponse.client)
  
  ::gRPCTest::Protos::Models::Client* temp = _impl_.client_;
  _impl_.client_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Models::Client* CreateClientResponse::_internal_mutable_client() {
  
  if (_impl_.client_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Models::Client>(GetArenaForAllocation());
    _impl_.client_ = p;
  }
  return _impl_.client_;
}
inline ::gRPCTest::Protos::Models::Client* CreateClientResponse::mutable_client() {
  ::gRPCTest::Protos::Models::Client* _msg = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.CreateClientResponse.client)
  return _msg;
}
inline void CreateClientResponse::set_allocated_client(::gRPCTest::Protos::Models::Client* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_);
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client));
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_ = client;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.CreateClientResponse.client)
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool CreateClientResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool CreateClientResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& CreateClientResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& CreateClientResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.CreateClientResponse.error_status)
  return _internal_error_status();
}
inline void CreateClientResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.CreateClientResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* CreateClientResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* CreateClientResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.CreateClientResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* CreateClientResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* CreateClientResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.CreateClientResponse.error_status)
  return _msg;
}
inline void CreateClientResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.CreateClientResponse.error_status)
}

// -------------------------------------------------------------------

// FetchClientByIdResponse

// .gRPCTest.Protos.Models.Client client = 1;
inline bool FetchClientByIdResponse::_internal_has_client() const {
  return this != internal_default_instance() && _impl_.client_ != nullptr;
}
inline bool FetchClientByIdResponse::has_client() const {
  return _internal_has_client();
}
inline const ::gRPCTest::Protos::Models::Client& FetchClientByIdResponse::_internal_client() const {
  const ::gRPCTest::Protos::Models::Client* p = _impl_.client_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Models::Client&>(
      ::gRPCTest::Protos::Models::_Client_default_instance_);
}
inline const ::gRPCTest::Protos::Models::Client& FetchClientByIdResponse::client() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchClientByIdResponse.client)
  return _internal_client();
}
inline void FetchClientByIdResponse::unsafe_arena_set_allocated_client(
    ::gRPCTest::Protos::Models::Client* client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_);
  }
  _impl_.client_ = client;
  if (client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchClientByIdResponse.client)
}
inline ::gRPCTest::Protos::Models::Client* FetchClientByIdResponse::release_client() {
  
  ::gRPCTest::Protos::Models::Client* temp = _impl_.client_;
  _impl_.client_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Models::Client* FetchClientByIdResponse::unsafe_arena_release_client() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchClientByIdResponse.client)
  
  ::gRPCTest::Protos::Models::Client* temp = _impl_.client_;
  _impl_.client_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Models::Client* FetchClientByIdResponse::_internal_mutable_client() {
  
  if (_impl_.client_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Models::Client>(GetArenaForAllocation());
    _impl_.client_ = p;
  }
  return _impl_.client_;
}
inline ::gRPCTest::Protos::Models::Client* FetchClientByIdResponse::mutable_client() {
  ::gRPCTest::Protos::Models::Client* _msg = _internal_mutable_client();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchClientByIdResponse.client)
  return _msg;
}
inline void FetchClientByIdResponse::set_allocated_client(::gRPCTest::Protos::Models::Client* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.client_);
  }
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client));
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.client_ = client;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchClientByIdResponse.client)
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool FetchClientByIdResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool FetchClientByIdResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchClientByIdResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchClientByIdResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchClientByIdResponse.error_status)
  return _internal_error_status();
}
inline void FetchClientByIdResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchClientByIdResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchClientByIdResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchClientByIdResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchClientByIdResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchClientByIdResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchClientByIdResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchClientByIdResponse.error_status)
  return _msg;
}
inline void FetchClientByIdResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchClientByIdResponse.error_status)
}

// -------------------------------------------------------------------

// FetchAllClientsResponse

// repeated .gRPCTest.Protos.Models.Client clients = 1;
inline int FetchAllClientsResponse::_internal_clients_size() const {
  return _impl_.clients_.size();
}
inline int FetchAllClientsResponse::clients_size() const {
  return _internal_clients_size();
}
inline ::gRPCTest::Protos::Models::Client* FetchAllClientsResponse::mutable_clients(int index) {
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchAllClientsResponse.clients)
  return _impl_.clients_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Client >*
FetchAllClientsResponse::mutable_clients() {
  // @@protoc_insertion_point(field_mutable_list:gRPCTest.Protos.Services.FetchAllClientsResponse.clients)
  return &_impl_.clients_;
}
inline const ::gRPCTest::Protos::Models::Client& FetchAllClientsResponse::_internal_clients(int index) const {
  return _impl_.clients_.Get(index);
}
inline const ::gRPCTest::Protos::Models::Client& FetchAllClientsResponse::clients(int index) const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchAllClientsResponse.clients)
  return _internal_clients(index);
}
inline ::gRPCTest::Protos::Models::Client* FetchAllClientsResponse::_internal_add_clients() {
  return _impl_.clients_.Add();
}
inline ::gRPCTest::Protos::Models::Client* FetchAllClientsResponse::add_clients() {
  ::gRPCTest::Protos::Models::Client* _add = _internal_add_clients();
  // @@protoc_insertion_point(field_add:gRPCTest.Protos.Services.FetchAllClientsResponse.clients)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Client >&
FetchAllClientsResponse::clients() const {
  // @@protoc_insertion_point(field_list:gRPCTest.Protos.Services.FetchAllClientsResponse.clients)
  return _impl_.clients_;
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 2;
inline bool FetchAllClientsResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool FetchAllClientsResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchAllClientsResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchAllClientsResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchAllClientsResponse.error_status)
  return _internal_error_status();
}
inline void FetchAllClientsResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchAllClientsResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchAllClientsResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchAllClientsResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchAllClientsResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchAllClientsResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchAllClientsResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchAllClientsResponse.error_status)
  return _msg;
}
inline void FetchAllClientsResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchAllClientsResponse.error_status)
}

// -------------------------------------------------------------------

// FetchClientInvoicesResponse

// uint64 clinet_id = 1;
inline void FetchClientInvoicesResponse::clear_clinet_id() {
  _impl_.clinet_id_ = uint64_t{0u};
}
inline uint64_t FetchClientInvoicesResponse::_internal_clinet_id() const {
  return _impl_.clinet_id_;
}
inline uint64_t FetchClientInvoicesResponse::clinet_id() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchClientInvoicesResponse.clinet_id)
  return _internal_clinet_id();
}
inline void FetchClientInvoicesResponse::_internal_set_clinet_id(uint64_t value) {
  
  _impl_.clinet_id_ = value;
}
inline void FetchClientInvoicesResponse::set_clinet_id(uint64_t value) {
  _internal_set_clinet_id(value);
  // @@protoc_insertion_point(field_set:gRPCTest.Protos.Services.FetchClientInvoicesResponse.clinet_id)
}

// repeated .gRPCTest.Protos.Models.Invoice invoices = 2;
inline int FetchClientInvoicesResponse::_internal_invoices_size() const {
  return _impl_.invoices_.size();
}
inline int FetchClientInvoicesResponse::invoices_size() const {
  return _internal_invoices_size();
}
inline ::gRPCTest::Protos::Models::Invoice* FetchClientInvoicesResponse::mutable_invoices(int index) {
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchClientInvoicesResponse.invoices)
  return _impl_.invoices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice >*
FetchClientInvoicesResponse::mutable_invoices() {
  // @@protoc_insertion_point(field_mutable_list:gRPCTest.Protos.Services.FetchClientInvoicesResponse.invoices)
  return &_impl_.invoices_;
}
inline const ::gRPCTest::Protos::Models::Invoice& FetchClientInvoicesResponse::_internal_invoices(int index) const {
  return _impl_.invoices_.Get(index);
}
inline const ::gRPCTest::Protos::Models::Invoice& FetchClientInvoicesResponse::invoices(int index) const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchClientInvoicesResponse.invoices)
  return _internal_invoices(index);
}
inline ::gRPCTest::Protos::Models::Invoice* FetchClientInvoicesResponse::_internal_add_invoices() {
  return _impl_.invoices_.Add();
}
inline ::gRPCTest::Protos::Models::Invoice* FetchClientInvoicesResponse::add_invoices() {
  ::gRPCTest::Protos::Models::Invoice* _add = _internal_add_invoices();
  // @@protoc_insertion_point(field_add:gRPCTest.Protos.Services.FetchClientInvoicesResponse.invoices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gRPCTest::Protos::Models::Invoice >&
FetchClientInvoicesResponse::invoices() const {
  // @@protoc_insertion_point(field_list:gRPCTest.Protos.Services.FetchClientInvoicesResponse.invoices)
  return _impl_.invoices_;
}

// .gRPCTest.Protos.Services.ServiceStatus error_status = 3;
inline bool FetchClientInvoicesResponse::_internal_has_error_status() const {
  return this != internal_default_instance() && _impl_.error_status_ != nullptr;
}
inline bool FetchClientInvoicesResponse::has_error_status() const {
  return _internal_has_error_status();
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchClientInvoicesResponse::_internal_error_status() const {
  const ::gRPCTest::Protos::Services::ServiceStatus* p = _impl_.error_status_;
  return p != nullptr ? *p : reinterpret_cast<const ::gRPCTest::Protos::Services::ServiceStatus&>(
      ::gRPCTest::Protos::Services::_ServiceStatus_default_instance_);
}
inline const ::gRPCTest::Protos::Services::ServiceStatus& FetchClientInvoicesResponse::error_status() const {
  // @@protoc_insertion_point(field_get:gRPCTest.Protos.Services.FetchClientInvoicesResponse.error_status)
  return _internal_error_status();
}
inline void FetchClientInvoicesResponse::unsafe_arena_set_allocated_error_status(
    ::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  _impl_.error_status_ = error_status;
  if (error_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gRPCTest.Protos.Services.FetchClientInvoicesResponse.error_status)
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchClientInvoicesResponse::release_error_status() {
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchClientInvoicesResponse::unsafe_arena_release_error_status() {
  // @@protoc_insertion_point(field_release:gRPCTest.Protos.Services.FetchClientInvoicesResponse.error_status)
  
  ::gRPCTest::Protos::Services::ServiceStatus* temp = _impl_.error_status_;
  _impl_.error_status_ = nullptr;
  return temp;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchClientInvoicesResponse::_internal_mutable_error_status() {
  
  if (_impl_.error_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::gRPCTest::Protos::Services::ServiceStatus>(GetArenaForAllocation());
    _impl_.error_status_ = p;
  }
  return _impl_.error_status_;
}
inline ::gRPCTest::Protos::Services::ServiceStatus* FetchClientInvoicesResponse::mutable_error_status() {
  ::gRPCTest::Protos::Services::ServiceStatus* _msg = _internal_mutable_error_status();
  // @@protoc_insertion_point(field_mutable:gRPCTest.Protos.Services.FetchClientInvoicesResponse.error_status)
  return _msg;
}
inline void FetchClientInvoicesResponse::set_allocated_error_status(::gRPCTest::Protos::Services::ServiceStatus* error_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.error_status_);
  }
  if (error_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_status));
    if (message_arena != submessage_arena) {
      error_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error_status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.error_status_ = error_status;
  // @@protoc_insertion_point(field_set_allocated:gRPCTest.Protos.Services.FetchClientInvoicesResponse.error_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Services
}  // namespace Protos
}  // namespace gRPCTest

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_services_2fClientService_2eproto
